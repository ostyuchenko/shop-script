/*
 * jQuery Tooltip plugin 1.3
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-tooltip/
 * http://docs.jquery.com/Plugins/Tooltip
 *
 * Copyright (c) 2006 - 2008 JÃ¶rn Zaefferer
 *
 * $Id: jquery.tooltip.js 5741 2008-06-21 15:22:16Z joern.zaefferer $
 * 
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */;(function($){var helper={},current,title,tID,IE=$.browser.msie&&/MSIE\s(5\.5|6\.)/.test(navigator.userAgent),track=false;$.tooltip={blocked:false,defaults:{delay:200,fade:false,showURL:true,extraClass:"",noHideOnClick:false,top:15,left:15,id:"tooltip"},block:function(){$.tooltip.blocked=!$.tooltip.blocked;}};$.fn.extend({tooltip:function(settings){settings=$.extend({},$.tooltip.defaults,settings);createHelper(settings);var r=this.each(function(){$.data(this,"tooltip",settings);this.tOpacity=helper.parent.css("opacity");this.tooltipText=this.title;$(this).removeAttr("title");this.alt="";}).mouseover(save).mouseout(hide);if(!settings.noHideOnClick){r.click(hide);}return r;},fixPNG:IE?function(){return this.each(function(){var image=$(this).css('backgroundImage');if(image.match(/^url\(["']?(.*\.png)["']?\)$/i)){image=RegExp.$1;$(this).css({'backgroundImage':'none','filter':"progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=crop, src='"+image+"')"}).each(function(){var position=$(this).css('position');if(position!='absolute'&&position!='relative')$(this).css('position','relative');});}});}:function(){return this;},unfixPNG:IE?function(){return this.each(function(){$(this).css({'filter':'',backgroundImage:''});});}:function(){return this;},hideWhenEmpty:function(){return this.each(function(){$(this)[$(this).html()?"show":"hide"]();});},url:function(){return this.attr('href')||this.attr('src');}});function createHelper(settings){if(helper.parent)return;helper.parent=$('<div id="'+settings.id+'"><h3></h3><div class="body"></div><div class="url"></div></div>').appendTo(document.body).hide();if($.fn.bgiframe)helper.parent.bgiframe();helper.title=$('h3',helper.parent);helper.body=$('div.body',helper.parent);helper.url=$('div.url',helper.parent);}function settings(element){return $.data(element,"tooltip");}function handle(event){if(settings(this).delay)tID=setTimeout(show,settings(this).delay);else
show();track=!!settings(this).track;$(document.body).bind('mousemove',update);update(event);}function save(){if($.tooltip.blocked||this==current||(!this.tooltipText&&!settings(this).bodyHandler))return;current=this;title=this.tooltipText;if(settings(this).bodyHandler){helper.title.hide();var bodyContent=settings(this).bodyHandler.call(this);if(bodyContent.nodeType||bodyContent.jquery){helper.body.empty().append(bodyContent)}else{helper.body.html(bodyContent);}helper.body.show();}else if(settings(this).showBody){var parts=title.split(settings(this).showBody);helper.title.html(parts.shift()).show();helper.body.empty();for(var i=0,part;(part=parts[i]);i++){if(i>0)helper.body.append("<br/>");helper.body.append(part);}helper.body.hideWhenEmpty();}else{helper.title.html(title).show();helper.body.hide();}if(settings(this).showURL&&$(this).url())helper.url.html($(this).url().replace('http://','')).show();else
helper.url.hide();helper.parent.addClass(settings(this).extraClass);if(settings(this).fixPNG)helper.parent.fixPNG();handle.apply(this,arguments);}function show(){tID=null;if((!IE||!$.fn.bgiframe)&&settings(current).fade){if(helper.parent.is(":animated"))helper.parent.stop().show().fadeTo(settings(current).fade,current.tOpacity);else
helper.parent.is(':visible')?helper.parent.fadeTo(settings(current).fade,current.tOpacity):helper.parent.fadeIn(settings(current).fade);}else{helper.parent.show();}update();}function update(event){if($.tooltip.blocked)return;if(event&&event.target.tagName=="OPTION"){return;}if(!track&&helper.parent.is(":visible")){$(document.body).unbind('mousemove',update)}if(current==null){$(document.body).unbind('mousemove',update);return;}helper.parent.removeClass("viewport-right").removeClass("viewport-bottom");var left=helper.parent[0].offsetLeft;var top=helper.parent[0].offsetTop;if(event){left=event.pageX+settings(current).left;top=event.pageY+settings(current).top;var right='auto';if(settings(current).positionLeft){right=$(window).width()-left;left='auto';}helper.parent.css({left:left,right:right,top:top});}var v=viewport(),h=helper.parent[0];if(v.x+v.cx<h.offsetLeft+h.offsetWidth){left-=h.offsetWidth+20+settings(current).left;helper.parent.css({left:left+'px'}).addClass("viewport-right");}if(v.y+v.cy<h.offsetTop+h.offsetHeight){top-=h.offsetHeight+20+settings(current).top;helper.parent.css({top:top+'px'}).addClass("viewport-bottom");}}function viewport(){return{x:$(window).scrollLeft(),y:$(window).scrollTop(),cx:$(window).width(),cy:$(window).height()};}function hide(event){if($.tooltip.blocked)return;if(tID)clearTimeout(tID);current=null;var tsettings=settings(this);function complete(){helper.parent.removeClass(tsettings.extraClass).hide().css("opacity","");}if((!IE||!$.fn.bgiframe)&&tsettings.fade){if(helper.parent.is(':animated'))helper.parent.stop().fadeTo(tsettings.fade,0,complete);else
helper.parent.stop().fadeOut(tsettings.fade,complete);}else
complete();if(settings(this).fixPNG)helper.parent.unfixPNG();}})(jQuery);;
/*!
 * jquery-timepicker v1.11.5 - A jQuery timepicker plugin inspired by Google Calendar. It supports both mouse and keyboard navigation.
 * Copyright (c) 2016 Jon Thornton - http://jonthornton.github.com/jquery-timepicker/
 * License: MIT
 */

!function(a){"object"==typeof exports&&exports&&"object"==typeof module&&module&&module.exports===exports?a(require("jquery")):"function"==typeof define&&define.amd?define(["jquery"],a):a(jQuery)}(function(a){function b(a){var b=a[0];return b.offsetWidth>0&&b.offsetHeight>0}function c(b){if(b.minTime&&(b.minTime=t(b.minTime)),b.maxTime&&(b.maxTime=t(b.maxTime)),b.durationTime&&"function"!=typeof b.durationTime&&(b.durationTime=t(b.durationTime)),"now"==b.scrollDefault)b.scrollDefault=function(){return b.roundingFunction(t(new Date),b)};else if(b.scrollDefault&&"function"!=typeof b.scrollDefault){var c=b.scrollDefault;b.scrollDefault=function(){return b.roundingFunction(t(c),b)}}else b.minTime&&(b.scrollDefault=function(){return b.roundingFunction(b.minTime,b)});if("string"===a.type(b.timeFormat)&&b.timeFormat.match(/[gh]/)&&(b._twelveHourTime=!0),b.showOnFocus===!1&&-1!=b.showOn.indexOf("focus")&&b.showOn.splice(b.showOn.indexOf("focus"),1),b.disableTimeRanges.length>0){for(var d in b.disableTimeRanges)b.disableTimeRanges[d]=[t(b.disableTimeRanges[d][0]),t(b.disableTimeRanges[d][1])];b.disableTimeRanges=b.disableTimeRanges.sort(function(a,b){return a[0]-b[0]});for(var d=b.disableTimeRanges.length-1;d>0;d--)b.disableTimeRanges[d][0]<=b.disableTimeRanges[d-1][1]&&(b.disableTimeRanges[d-1]=[Math.min(b.disableTimeRanges[d][0],b.disableTimeRanges[d-1][0]),Math.max(b.disableTimeRanges[d][1],b.disableTimeRanges[d-1][1])],b.disableTimeRanges.splice(d,1))}return b}function d(b){var c=b.data("timepicker-settings"),d=b.data("timepicker-list");if(d&&d.length&&(d.remove(),b.data("timepicker-list",!1)),c.useSelect){d=a("<select />",{"class":"ui-timepicker-select"});var g=d}else{d=a("<ul />",{"class":"ui-timepicker-list"});var g=a("<div />",{"class":"ui-timepicker-wrapper",tabindex:-1});g.css({display:"none",position:"absolute"}).append(d)}if(c.noneOption)if(c.noneOption===!0&&(c.noneOption=c.useSelect?"Time...":"None"),a.isArray(c.noneOption)){for(var i in c.noneOption)if(parseInt(i,10)==i){var k=e(c.noneOption[i],c.useSelect);d.append(k)}}else{var k=e(c.noneOption,c.useSelect);d.append(k)}if(c.className&&g.addClass(c.className),(null!==c.minTime||null!==c.durationTime)&&c.showDuration){"function"==typeof c.step?"function":c.step;g.addClass("ui-timepicker-with-duration"),g.addClass("ui-timepicker-step-"+c.step)}var l=c.minTime;"function"==typeof c.durationTime?l=t(c.durationTime()):null!==c.durationTime&&(l=c.durationTime);var n=null!==c.minTime?c.minTime:0,o=null!==c.maxTime?c.maxTime:n+u-1;n>o&&(o+=u),o===u-1&&"string"===a.type(c.timeFormat)&&c.show2400&&(o=u);var p=c.disableTimeRanges,v=0,x=p.length,y=c.step;"function"!=typeof y&&(y=function(){return c.step});for(var i=n,z=0;o>=i;z++,i+=60*y(z)){var A=i,B=s(A,c);if(c.useSelect){var C=a("<option />",{value:B});C.text(B)}else{var C=a("<li />");C.addClass(43200>A%86400?"ui-timepicker-am":"ui-timepicker-pm"),C.data("time",86400>=A?A:A%86400),C.text(B)}if((null!==c.minTime||null!==c.durationTime)&&c.showDuration){var D=r(i-l,c.step);if(c.useSelect)C.text(C.text()+" ("+D+")");else{var E=a("<span />",{"class":"ui-timepicker-duration"});E.text(" ("+D+")"),C.append(E)}}x>v&&(A>=p[v][1]&&(v+=1),p[v]&&A>=p[v][0]&&A<p[v][1]&&(c.useSelect?C.prop("disabled",!0):C.addClass("ui-timepicker-disabled"))),d.append(C)}if(g.data("timepicker-input",b),b.data("timepicker-list",g),c.useSelect)b.val()&&d.val(f(t(b.val()),c)),d.on("focus",function(){a(this).data("timepicker-input").trigger("showTimepicker")}),d.on("blur",function(){a(this).data("timepicker-input").trigger("hideTimepicker")}),d.on("change",function(){m(b,a(this).val(),"select")}),m(b,d.val(),"initial"),b.hide().after(d);else{var F=c.appendTo;"string"==typeof F?F=a(F):"function"==typeof F&&(F=F(b)),F.append(g),j(b,d),d.on("mousedown click","li",function(c){b.off("focus.timepicker"),b.on("focus.timepicker-ie-hack",function(){b.off("focus.timepicker-ie-hack"),b.on("focus.timepicker",w.show)}),h(b)||b[0].focus(),d.find("li").removeClass("ui-timepicker-selected"),a(this).addClass("ui-timepicker-selected"),q(b)&&(b.trigger("hideTimepicker"),d.on("mouseup.timepicker click.timepicker","li",function(a){d.off("mouseup.timepicker click.timepicker"),g.hide()}))})}}function e(b,c){var d,e,f;return"object"==typeof b?(d=b.label,e=b.className,f=b.value):"string"==typeof b?d=b:a.error("Invalid noneOption value"),c?a("<option />",{value:f,"class":e,text:d}):a("<li />",{"class":e,text:d}).data("time",String(f))}function f(a,b){return a=b.roundingFunction(a,b),null!==a?s(a,b):void 0}function g(b){if(b.target!=window){var c=a(b.target);c.closest(".ui-timepicker-input").length||c.closest(".ui-timepicker-wrapper").length||(w.hide(),a(document).unbind(".ui-timepicker"),a(window).unbind(".ui-timepicker"))}}function h(a){var b=a.data("timepicker-settings");return(window.navigator.msMaxTouchPoints||"ontouchstart"in document)&&b.disableTouchKeyboard}function i(b,c,d){if(!d&&0!==d)return!1;var e=b.data("timepicker-settings"),f=!1,d=e.roundingFunction(d,e);return c.find("li").each(function(b,c){var e=a(c);if("number"==typeof e.data("time"))return e.data("time")==d?(f=e,!1):void 0}),f}function j(a,b){b.find("li").removeClass("ui-timepicker-selected");var c=t(l(a),a.data("timepicker-settings"));if(null!==c){var d=i(a,b,c);if(d){var e=d.offset().top-b.offset().top;(e+d.outerHeight()>b.outerHeight()||0>e)&&b.scrollTop(b.scrollTop()+d.position().top-d.outerHeight()),d.addClass("ui-timepicker-selected")}}}function k(b,c){if(""!==this.value&&"timepicker"!=c){var d=a(this);if(!d.is(":focus")||b&&"change"==b.type){var e=d.data("timepicker-settings"),f=t(this.value,e);if(null===f)return void d.trigger("timeFormatError");var g=!1;if(null!==e.minTime&&null!==e.maxTime&&(f<e.minTime||f>e.maxTime)&&(g=!0),a.each(e.disableTimeRanges,function(){return f>=this[0]&&f<this[1]?(g=!0,!1):void 0}),e.forceRoundTime){var h=e.roundingFunction(f,e);h!=f&&(f=h,c=null)}var i=s(f,e);g?m(d,i,"error")&&d.trigger("timeRangeError"):m(d,i,c)}}}function l(a){return a.is("input")?a.val():a.data("ui-timepicker-value")}function m(a,b,c){if(a.is("input")){a.val(b);var d=a.data("timepicker-settings");d.useSelect&&"select"!=c&&"initial"!=c&&a.data("timepicker-list").val(f(t(b),d))}return a.data("ui-timepicker-value")!=b?(a.data("ui-timepicker-value",b),"select"==c?a.trigger("selectTime").trigger("changeTime").trigger("change","timepicker"):-1==["error","initial"].indexOf(c)&&a.trigger("changeTime"),!0):(a.trigger("selectTime"),!1)}function n(a){switch(a.keyCode){case 13:case 9:return;default:a.preventDefault()}}function o(c){var d=a(this),e=d.data("timepicker-list");if(!e||!b(e)){if(40!=c.keyCode)return!0;w.show.call(d.get(0)),e=d.data("timepicker-list"),h(d)||d.focus()}switch(c.keyCode){case 13:return q(d)&&(k.call(d.get(0),{type:"change"}),w.hide.apply(this)),c.preventDefault(),!1;case 38:var f=e.find(".ui-timepicker-selected");return f.length?f.is(":first-child")||(f.removeClass("ui-timepicker-selected"),f.prev().addClass("ui-timepicker-selected"),f.prev().position().top<f.outerHeight()&&e.scrollTop(e.scrollTop()-f.outerHeight())):(e.find("li").each(function(b,c){return a(c).position().top>0?(f=a(c),!1):void 0}),f.addClass("ui-timepicker-selected")),!1;case 40:return f=e.find(".ui-timepicker-selected"),0===f.length?(e.find("li").each(function(b,c){return a(c).position().top>0?(f=a(c),!1):void 0}),f.addClass("ui-timepicker-selected")):f.is(":last-child")||(f.removeClass("ui-timepicker-selected"),f.next().addClass("ui-timepicker-selected"),f.next().position().top+2*f.outerHeight()>e.outerHeight()&&e.scrollTop(e.scrollTop()+f.outerHeight())),!1;case 27:e.find("li").removeClass("ui-timepicker-selected"),w.hide();break;case 9:w.hide();break;default:return!0}}function p(c){var d=a(this),e=d.data("timepicker-list"),f=d.data("timepicker-settings");if(!e||!b(e)||f.disableTextInput)return!0;switch(c.keyCode){case 96:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:case 65:case 77:case 80:case 186:case 8:case 46:f.typeaheadHighlight?j(d,e):e.hide()}}function q(a){var b=a.data("timepicker-settings"),c=a.data("timepicker-list"),d=null,e=c.find(".ui-timepicker-selected");return e.hasClass("ui-timepicker-disabled")?!1:(e.length&&(d=e.data("time")),null!==d&&("string"!=typeof d&&(d=s(d,b)),m(a,d,"select")),!0)}function r(a,b){a=Math.abs(a);var c,d,e=Math.round(a/60),f=[];return 60>e?f=[e,v.mins]:(c=Math.floor(e/60),d=e%60,30==b&&30==d&&(c+=v.decimal+5),f.push(c),f.push(1==c?v.hr:v.hrs),30!=b&&d&&(f.push(d),f.push(v.mins))),f.join(" ")}function s(b,c){if("number"!=typeof b)return null;var d=parseInt(b%60),e=parseInt(b/60%60),f=parseInt(b/3600%24),g=new Date(1970,0,2,f,e,d,0);if(isNaN(g.getTime()))return null;if("function"===a.type(c.timeFormat))return c.timeFormat(g);for(var h,i,j="",k=0;k<c.timeFormat.length;k++)switch(i=c.timeFormat.charAt(k)){case"a":j+=g.getHours()>11?v.pm:v.am;break;case"A":j+=g.getHours()>11?v.PM:v.AM;break;case"g":h=g.getHours()%12,j+=0===h?"12":h;break;case"G":h=g.getHours(),b===u&&(h=c.show2400?24:0),j+=h;break;case"h":h=g.getHours()%12,0!==h&&10>h&&(h="0"+h),j+=0===h?"12":h;break;case"H":h=g.getHours(),b===u&&(h=c.show2400?24:0),j+=h>9?h:"0"+h;break;case"i":var e=g.getMinutes();j+=e>9?e:"0"+e;break;case"s":d=g.getSeconds(),j+=d>9?d:"0"+d;break;case"\\":k++,j+=c.timeFormat.charAt(k);break;default:j+=i}return j}function t(a,b){if(""===a||null===a)return null;if("object"==typeof a)return 3600*a.getHours()+60*a.getMinutes()+a.getSeconds();if("string"!=typeof a)return a;a=a.toLowerCase().replace(/[\s\.]/g,""),("a"==a.slice(-1)||"p"==a.slice(-1))&&(a+="m");var c="("+v.am.replace(".","")+"|"+v.pm.replace(".","")+"|"+v.AM.replace(".","")+"|"+v.PM.replace(".","")+")?",d=new RegExp("^"+c+"([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?"+c+"$"),e=a.match(d);if(!e)return null;var f=parseInt(1*e[2],10);if(f>24){if(b&&b.wrapHours===!1)return null;f%=24}var g=e[1]||e[5],h=f;if(12>=f&&g){var i=g==v.pm||g==v.PM;h=12==f?i?12:0:f+(i?12:0)}var j=1*e[3]||0,k=1*e[4]||0,l=3600*h+60*j+k;if(12>f&&!g&&b&&b._twelveHourTime&&b.scrollDefault){var m=l-b.scrollDefault();0>m&&m>=u/-2&&(l=(l+u/2)%u)}return l}var u=86400,v={am:"am",pm:"pm",AM:"AM",PM:"PM",decimal:".",mins:"mins",hr:"hr",hrs:"hrs"},w={init:function(b){return this.each(function(){var e=a(this),f=[];for(var g in a.fn.timepicker.defaults)e.data(g)&&(f[g]=e.data(g));var h=a.extend({},a.fn.timepicker.defaults,f,b);if(h.lang&&(v=a.extend(v,h.lang)),h=c(h),e.data("timepicker-settings",h),e.addClass("ui-timepicker-input"),h.useSelect)d(e);else{if(e.prop("autocomplete","off"),h.showOn)for(var i in h.showOn)e.on(h.showOn[i]+".timepicker",w.show);e.on("change.timepicker",k),e.on("keydown.timepicker",o),e.on("keyup.timepicker",p),h.disableTextInput&&e.on("keydown.timepicker",n),k.call(e.get(0),null,"initial")}})},show:function(c){var e=a(this),f=e.data("timepicker-settings");if(c&&c.preventDefault(),f.useSelect)return void e.data("timepicker-list").focus();h(e)&&e.blur();var k=e.data("timepicker-list");if(!e.prop("readonly")&&(k&&0!==k.length&&"function"!=typeof f.durationTime||(d(e),k=e.data("timepicker-list")),!b(k))){e.data("ui-timepicker-value",e.val()),j(e,k),w.hide(),k.show();var m={};f.orientation.match(/r/)?m.left=e.offset().left+e.outerWidth()-k.outerWidth()+parseInt(k.css("marginLeft").replace("px",""),10):m.left=e.offset().left+parseInt(k.css("marginLeft").replace("px",""),10);var n;n=f.orientation.match(/t/)?"t":f.orientation.match(/b/)?"b":e.offset().top+e.outerHeight(!0)+k.outerHeight()>a(window).height()+a(window).scrollTop()?"t":"b","t"==n?(k.addClass("ui-timepicker-positioned-top"),m.top=e.offset().top-k.outerHeight()+parseInt(k.css("marginTop").replace("px",""),10)):(k.removeClass("ui-timepicker-positioned-top"),m.top=e.offset().top+e.outerHeight()+parseInt(k.css("marginTop").replace("px",""),10)),k.offset(m);var o=k.find(".ui-timepicker-selected");if(!o.length){var p=t(l(e));null!==p?o=i(e,k,p):f.scrollDefault&&(o=i(e,k,f.scrollDefault()))}if(o&&o.length){var q=k.scrollTop()+o.position().top-o.outerHeight();k.scrollTop(q)}else k.scrollTop(0);return f.stopScrollPropagation&&a(document).on("wheel.ui-timepicker",".ui-timepicker-wrapper",function(b){b.preventDefault();var c=a(this).scrollTop();a(this).scrollTop(c+b.originalEvent.deltaY)}),a(document).on("touchstart.ui-timepicker mousedown.ui-timepicker",g),a(window).on("resize.ui-timepicker",g),f.closeOnWindowScroll&&a(document).on("scroll.ui-timepicker",g),e.trigger("showTimepicker"),this}},hide:function(c){var d=a(this),e=d.data("timepicker-settings");return e&&e.useSelect&&d.blur(),a(".ui-timepicker-wrapper").each(function(){var c=a(this);if(b(c)){var d=c.data("timepicker-input"),e=d.data("timepicker-settings");e&&e.selectOnBlur&&q(d),c.hide(),d.trigger("hideTimepicker")}}),this},option:function(b,e){return"string"==typeof b&&"undefined"==typeof e?a(this).data("timepicker-settings")[b]:this.each(function(){var f=a(this),g=f.data("timepicker-settings"),h=f.data("timepicker-list");"object"==typeof b?g=a.extend(g,b):"string"==typeof b&&(g[b]=e),g=c(g),f.data("timepicker-settings",g),h&&(h.remove(),f.data("timepicker-list",!1)),g.useSelect&&d(f)})},getSecondsFromMidnight:function(){return t(l(this))},getTime:function(a){var b=this,c=l(b);if(!c)return null;var d=t(c);if(null===d)return null;a||(a=new Date);var e=new Date(a);return e.setHours(d/3600),e.setMinutes(d%3600/60),e.setSeconds(d%60),e.setMilliseconds(0),e},isVisible:function(){var a=this,c=a.data("timepicker-list");return!(!c||!b(c))},setTime:function(a){var b=this,c=b.data("timepicker-settings");if(c.forceRoundTime)var d=f(t(a),c);else var d=s(t(a),c);return a&&null===d&&c.noneOption&&(d=a),m(b,d),b.data("timepicker-list")&&j(b,b.data("timepicker-list")),this},remove:function(){var a=this;if(a.hasClass("ui-timepicker-input")){var b=a.data("timepicker-settings");return a.removeAttr("autocomplete","off"),a.removeClass("ui-timepicker-input"),a.removeData("timepicker-settings"),a.off(".timepicker"),a.data("timepicker-list")&&a.data("timepicker-list").remove(),b.useSelect&&a.show(),a.removeData("timepicker-list"),this}}};a.fn.timepicker=function(b){return this.length?w[b]?this.hasClass("ui-timepicker-input")?w[b].apply(this,Array.prototype.slice.call(arguments,1)):this:"object"!=typeof b&&b?void a.error("Method "+b+" does not exist on jQuery.timepicker"):w.init.apply(this,arguments):this},a.fn.timepicker.defaults={appendTo:"body",className:null,closeOnWindowScroll:!1,disableTextInput:!1,disableTimeRanges:[],disableTouchKeyboard:!1,durationTime:null,forceRoundTime:!1,maxTime:null,minTime:null,noneOption:!1,orientation:"l",roundingFunction:function(a,b){if(null===a)return null;if("number"!=typeof b.step)return a;var c=a%(60*b.step);return c>=30*b.step?a+=60*b.step-c:a-=c,a==u&&b.show2400?a:a%u},scrollDefault:null,selectOnBlur:!1,show2400:!1,showDuration:!1,showOn:["click","focus"],showOnFocus:!0,step:30,stopScrollPropagation:!1,timeFormat:"g:ia",typeaheadHighlight:!0,useSelect:!1,wrapHours:!0}});;
/*
 * JavaScript Templates 2.1.0
 * https://github.com/blueimp/JavaScript-Templates
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * http://www.opensource.org/licenses/MIT
 *
 * Inspired by John Resig's JavaScript Micro-Templating:
 * http://ejohn.org/blog/javascript-micro-templating/
 */

/*jslint evil: true, regexp: true */
/*global document, define */

(function ($) {
    "use strict";
    var tmpl = function (str, data, nocache) {
        var f = !/[^\w\-\.:]/.test(str) ?
            ( !nocache ?
                    (tmpl.cache[str] = tmpl.cache[str] || tmpl(tmpl.load(str))) :
                        tmpl.cache[str] = tmpl(tmpl.load(str))
            ) :
            new Function(
                tmpl.arg + ',tmpl',
                "var _e=tmpl.encode" + tmpl.helper + ",_s='" +
                    str.replace(tmpl.regexp, tmpl.func) +
                    "';return _s;"
            );
        return data ? f(data, tmpl) : function (data) {
            return f(data, tmpl);
        };
    };
    tmpl.cache = {};
    tmpl.load = function (id) {
        var e = document.getElementById(id),
            pattern = /<\\\/(\w+)/g,
            replace = '<'+'/$1';
        if(!e && console) {
            throw { message: 'template with id='+id+' not found' };
        }
        return e?(e.tagName.toLowerCase() == 'textarea' ? e.value: document.getElementById(id).innerHTML).replace(pattern, replace):null;
    };
    tmpl.regexp = /([\s'\\])(?![^%]*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g;
    tmpl.func = function (s, p1, p2, p3, p4, p5) {
        if (p1) { // whitespace, quote and backspace in interpolation context
            return {
                "\n": "\\n",
                "\r": "\\r",
                "\t": "\\t",
                " " : " "
            }[s] || "\\" + s;
        }
        if (p2) { // interpolation: {%=prop%}, or unescaped: {%#prop%}
            if (p2 === "=") {
                return "'+_e(" + p3 + ")+'";
            }
            return "'+(" + p3 + "||'')+'";
        }
        if (p4) { // evaluation start tag: {%
            return "';";
        }
        if (p5) { // evaluation end tag: %}
            return "_s+='";
        }
    };
    tmpl.encReg = /[<>&"'\x00]/g;
    tmpl.encMap = {
        "<"   : "&lt;",
        ">"   : "&gt;",
        "&"   : "&amp;",
        "\""  : "&quot;",
        "'"   : "&#39;"
    };
    tmpl.encode = function (s) {
        return String(s || "").replace(
            tmpl.encReg,
            function (c) {
                return tmpl.encMap[c] || "";
            }
        );
    };
    tmpl.arg = "o";
    tmpl.helper = ",print=function(s,e){_s+=e&&(s||'')||_e(s);}" +
        ",include=function(s,d){_s+=tmpl(s,d);}";
    if (typeof define === "function" && define.amd) {
        define(function () {
            return tmpl;
        });
    } else {
        $.tmpl = tmpl;
    }
}(this));;
(function($) {

    $.fn.lazyLoad = function(options, ext) {

        if (options == 'stop') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.stopped = true;
            }
            return;
        }
        
        if (options == 'reload') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.stopped = false;
                settings.loading = false;
                this.get(0).onscroll = null;
                this.lazyLoad(settings);
            }
            return;
        }

        if (options == 'sleep') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.loading = true;
            }
            return;
        }

        if (options == 'wake') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                settings.loading = false;
            }
            return;
        }

        if (options == 'force') {
            var settings = this.data('lazyLoadSettings');
            if (settings) {
                if (!settings.loading) {
                    settings.load();
                }
            }
            return;
        }

        if (options === 'get') {
            var settings = this.data('lazyLoadSettings') || {};
            return settings[ext];
        }

        this.data('lazyLoadSettings', $.extend({
            distance: 50,
            load: function() {},
            container: container,
            state: 'wake',
            hash: location.hash.replace(/^[^#]*#\/*/, '').split('/')[0] || null,
            distanceBetweenBottoms: null
        }, options || {}));

        var settings = this.data('lazyLoadSettings');
        settings.loading = false;
        settings.stopped = false;

        var win = $(window);
        var container = settings.container || $(this);

        init();

        function init()
        {
            if (settings.hash !== null) {
                if (!$.isArray(settings.hash)) {
                    settings.hash = [settings.hash];
                }
            }
            $.fn.lazyLoad.call(win, settings.state);
            initHandler();
        }

        function scrollHandler()
        {
            if (settings.stopped) {
                this.onscroll = null;
                return;
            }
            if (!settings.stopped && !settings.loading && distanceBetweenBottoms(container, win) <= settings.distance) {
                if (settings.hash !== null) {
                    var loc_hash = location.hash.replace(/^[^#]*#\/*/, '').split('/')[0];
                    if (settings.hash.indexOf(loc_hash) === -1) {
                        this.onscroll = null;
                        return;
                    }
                }
                settings.load();
            }
        }

        function initHandler()
        {
            var interval = 350, h;
            var timerId = setTimeout(h = function() {
                if (settings.stopped) {
                    clearTimeout(timerId);
                    return;
                }
                if (settings.hash !== null) {
                    var loc_hash = location.hash.replace(/^[^#]*#\/*/, '').split('/')[0];
                    if (settings.hash.indexOf(loc_hash) === -1) {
                        clearTimeout(timerId);
                        return;
                    }
                }
                if (!settings.loading) {
                    var r = distanceBetweenBottoms(container, win);
                    if (distanceBetweenBottoms(container, win) <= settings.distance) {
                        settings.load();
                        timerId = setTimeout(h, interval);
                    } else {
                        win.get(0).onscroll = scrollHandler;
                        clearTimeout(timerId);
                    }
                } else {
                    timerId = setTimeout(h, interval);
                }
            }, interval);
        }

        var distanceBetweenBottoms = typeof settings.distanceBetweenBottoms === 'function' ?
            settings.distanceBetweenBottoms :
            function (container, win, offset) {
                container = typeof container === 'string' ? $(container) : container;
                offset = offset || 0;
                return (container.position().top + container.outerHeight() - offset) - (win.scrollTop() + win.height());
            };
    };
})(jQuery);
;
(function ($) {
    $.storage = new $.store();
    $.orders = {
        options: {
            view: 'table'      // default view
        },

        //
        // Init-related
        //

        init: function (options) {

            var that = this;
            that.options = options;
            if (typeof($.History) != "undefined") {
                $.History.bind(function () {
                    that.dispatch();
                });
            }

            // Make sure we can access the original request URL from any jqXHR objects
            // So we could in $.wa.errorHandler find to what url was request
            $.ajaxPrefilter(function(options, originalOptions, jqXHR) {
                jqXHR.originalRequestOptions = originalOptions;
            });

            $.wa.errorHandler = function (xhr) {
                // see ajaxPrefilter above
                var originalRequestOptions = xhr.originalRequestOptions || {};


                if ((xhr.status === 403) || (xhr.status === 404) ) {
                    var text = $(xhr.responseText);
                    if (text.find('.dialog-content').length) {
                        text = $('<div class="block double-padded"></div>').append(text.find('.dialog-content *'));

                    } else {
                        text = $('<div class="block double-padded"></div>').append(text.find(':not(style)'));
                    }

                    var container_type = 'content';

                    var request_url = originalRequestOptions.url || '';
                    if (request_url.length > 0) {
                        var params_start_pos = request_url.indexOf('?');
                        if (params_start_pos !== -1) {
                            var params_str = request_url.substr(params_start_pos + 1);
                            var params = $.shop.helper.parseParams(params_str) || {};
                            if (params.module === 'order' && params.view !== 'table' && $('#s-order').length) {
                                container_type = 'order';
                            }
                        }
                    }

                    if (container_type === 'order') {
                        // just render content about error
                        $('#s-order').empty().append(text);
                    } else {
                        // render content in common container and call destructor of order_list object, cause nothing we can do about it already
                        $("#s-content").empty().append(text);
                        if ($.order_list) {
                            $.order_list.finit();
                        }
                    }

                    return false;
                }
                return true;
            };
            var hash = window.location.hash;
            if (hash === '#/' || !hash) {
                this.dispatch();
            } else {
                $.wa.setHash(hash);
            }

            this.initSearch();

            // sync with app counters
            $(document).bind('wa.appcount', function(event, data) {
                // data could be undefined
                data = data || {};

                var cnt = parseInt(data.shop, 10);
                $('#s-pending-orders .small').text(cnt ? '+' + cnt : '');

                // update prefix of document.title. Prefix looks like: (\d+).
                // Take into account extreme cases: cnt=0 or no prefix yet
                var match = document.title.match(/\(\d+\) /);
                if (match) {
                    document.title = document.title.replace(match[0], cnt ? '(' + cnt + ') ' : '');
                } else {
                    if (cnt) {
                        document.title = '(' + cnt + ') ' + document.title;
                    }
                }
            });

            $(function () {
                $("#maincontent").on('click', '.s-alert-close', function () {
                    var alerts = $.storage.get('shop/alerts');
                    var $item = $(this).parent();
                    if (!alerts) {
                        alerts = [];
                    }
                    alerts.push($item.data('alert'));
                    alerts = alerts.filter(function (elem, index, self) {
                        return (elem != null) && (index == self.indexOf(elem));
                    });
                    $.storage.set('shop/alerts', alerts);
                    $item.remove();
                    return false;
                });
            });

            this.checkAlerts();
        },

        initSearch: function() {
            var search_input = $("#s-orders-search");

            var autocomplete_url = '?action=autocomplete&type=order';
            var last_response = [];

            var search_xhr = null;

            var onSelect = function(autocomplete_item) {
                switch (autocomplete_item.autocomplete_item_type) {
                    case 'order':
                        $.wa.setHash('#/order/' + autocomplete_item.id + '/');
                        search_input.val(autocomplete_item.value);
                        break;
                    case 'contact':
                        $.wa.setHash('#/orders/contact_id=' + autocomplete_item.id + '/');
                        search_input.val(autocomplete_item.value);
                        break;
                    case 'product':
                        $.wa.setHash('#/orders/product_id=' + autocomplete_item.id + '/');
                        search_input.val(autocomplete_item.value);
                        break;
                    case 'coupon':
                        $.wa.setHash('#/orders/coupon_id=' + autocomplete_item.id + '/');
                        break;
                    case 'tracking_number':
                        $.wa.setHash('#/orders/tracking_number=' + autocomplete_item.value + '/');
                        break;
                    case 'shipping':
                        $.wa.setHash('#/orders/shipping_id=' + autocomplete_item.id + '/');
                        break;
                    case 'payment':
                        $.wa.setHash('#/orders/payment_id=' + autocomplete_item.id + '/');
                        break;
                    case 'city':
                        $.wa.setHash('#/orders/city=' + autocomplete_item.value + '/');
                        break;
                    case 'region':
                        $.wa.setHash('#/orders/region=' + ((autocomplete_item.value || '').split(':')[1] || '') + '/');
                        break;
                    case 'country':
                        $.wa.setHash('#/orders/country=' + autocomplete_item.value + '/');
                        break;
                    case 'item_code':
                        $.wa.setHash('#/orders/item_code=' + autocomplete_item.value + '/');
                        break;
                    default:
                        // search
                        break;
                }
            };

            search_input.unbind('keydown').
                bind('keydown', function(event) {
                    if (event.keyCode == 13 || event.keyCode == 10) { // 'Enter'
                        // search is running...
                        if (search_xhr) { return false; }

                        var self = $(this);
                        if (!$(this).val()) {
                            location.hash = '#/orders/all/';
                            self.autocomplete("close");
                            return false;
                        } else {
                            if (last_response && $.isArray(last_response) && last_response.length) {
                                onSelect(last_response[0]);
                                setTimeout(function() {
                                    self.autocomplete("close");
                                }, 150);
                                return false;
                            }
                        }
                    }
                });

            search_input.autocomplete({
                minLength: 1,
                delay: 300,
                html: true,
                select: function(event, ui) {
                    //location.hash = '#/order/'+ui.item.id+'/';
                    onSelect(ui.item);
                    return false;
                },
                source : function(request, response) {
                    if (search_xhr) { search_xhr.abort(); }

                    search_xhr = $.getJSON(autocomplete_url, request, function(r) {
                        last_response = r;
                        response(r);

                    }).always( function() {
                        search_xhr = null;
                    });
                }
            });
        },

        //
        // Dispatch-related
        //

        // dispatch() ignores the call if prevHash == hash
        prevHash: null,
        hash: null,

        // if this is > 0 then this.dispatch() decrements it and ignores a call
        skipDispatch: 0,

        /** Cancel the next n automatic dispatches when window.location.hash changes */
        stopDispatch: function (n) {
            this.skipDispatch = n;
        },

        // Change location hash without triggering dispatch
        forceHash: function(hash) {
            if (location.hash != hash) {
                this.skipDispatch++;
                $.wa.setHash(hash);
            }
        },

        /** Implements #hash-based navigation. Called every time location.hash changes. */
        dispatch: function (hash) {
            if (this.skipDispatch > 0) {
                this.skipDispatch--;
                return false;
            }
            if (hash === undefined || hash === null) {
                hash = window.location.hash;
            }
            hash = hash.replace(/(^[^#]*#\/*|\/$)/g, ''); /* fix syntax highlight*/
            if (this.hash !== null) {
                this.prevHash = this.hash;
            }
            this.hash = hash;
            var e = new $.Event('wa_before_dispatched');
            $(window).trigger(e);

            if (hash) {
                hash = hash.split('/');
                if (hash[0]) {
                    var actionName = "";
                    var attrMarker = hash.length;
                    var lastValidActionName = null;
                    var lastValidAttrMarker = null;
                    for (var i = 0; i < hash.length; i++) {
                        var h = hash[i];
                        if (i < 2) {
                            if (i === 0) {
                                actionName = h;
                            } else if (parseInt(h, 10) != h && h.indexOf('=') == -1) {
                                actionName += h.substr(0,1).toUpperCase() + h.substr(1);
                            } else {
                                break;
                            }
                            if (typeof(this[actionName + 'Action']) == 'function') {
                                lastValidActionName = actionName;
                                lastValidAttrMarker = i + 1;
                            }
                        } else {
                            break;
                        }
                    }
                    attrMarker = i;

                    if (typeof(this[actionName + 'Action']) !== 'function' && lastValidActionName) {
                        actionName = lastValidActionName;
                        attrMarker = lastValidAttrMarker;
                    }

                    var attr = hash.slice(attrMarker);
                    this.preExecute(actionName);
                    if (typeof(this[actionName + 'Action']) == 'function') {
                        $.shop.trace('$.orders.dispatch',[actionName + 'Action',attr]);
                        this[actionName + 'Action'].apply(this, attr);
                    } else {
                        $.shop.error('Invalid action name:', actionName+'Action');
                    }
                    this.postExecute(actionName);
                } else {
                    this.preExecute();
                    this.defaultAction();
                    this.postExecute();
                }
            } else {
                this.preExecute();
                this.defaultAction();
                this.postExecute();
            }
        },

        back: function() {
            var prevHash = ($.orders.prevHash || '');
            location.hash = prevHash ? prevHash + '/' : '';
        },

        preExecute: function(actionName, attr) {
        },

        postExecute: function(actionName, attr) {
            this.actionName = actionName;
        },

        //
        // Action handlers.
        // Called by dispatch when corresponding location.hash is set.
        //

        defaultAction: function () {
            this.ordersAction();
        },

        couponsAction: function() {
            if ($.order_list) {
                $.order_list.finit();
            }
            this.load('?module=coupons');
        },

        ordersEditAction: function(id) {
            this.load('?module=order&action=edit&id='+id, function() {
                if ($.order_list) {
                    $.order_list.finit();
                }
            });
        },

        ordersNewAction: function (params) {
            this.load('?module=order&action=edit'+(params ? '&'+params : ''), function() {
                if ($.order_list) {
                    $.order_list.finit();
                }
            });
        },

        ordersAction: function(params) {

            if (params === 'hash') {
                params = {
                    hash: Array.prototype.slice.call(arguments, 1).join('/')
                };
            } else {
                var search_hash = '';
                if (params === 'search') {
                    search_hash = Array.prototype.slice.call(arguments, 1);
                }
                if (arguments.length > 1) {
                    params = Array.prototype.join.call(arguments, '/');
                }
                if (!params) {
                    // default params
                    params = "state_id=new|processing|auth|paid";
                } else if (params === 'all') {
                    params = '';
                }
                params = $.shop.helper.parseParams(params || '');
                if (!params.view) {
                    params.view = $.storage.get('shop/orders/view') || this.options.view;
                }
                $.storage.set('shop/orders/view', params.view);
                if ($.order_edit) {
                    $.order_edit.slideBack();
                }
                if (search_hash) {
                    params.search = search_hash;
                }
            }

            if (this.actionName !== 'orders' || !$.order_list) {
                if ($.order_list) {
                    $.order_list.finit();
                }
                this.load('?module=orders&'+this.buildOrdersUrlComponent(params), function() {
                    if ($.order_list) {
                        $.order_list.dispatch(params);
                    }
                });
            } else {
                $.order_list.dispatch(params);
            }
        },

        orderAction: function(id, params) {
            params = $.shop.helper.parseParams(params || '');
            if (!params.view) {
                params.view = $.storage.get('shop/orders/view') || this.options.view;
            }
            $.storage.set('shop/orders/view', params.view);

            if ($.order_edit) {
                $.order_edit.slideBack();
            }

            this.load('?module=order&id='+encodeURIComponent(id)+'&'+this.buildOrdersUrlComponent(params), function() {
                // back link at order content
                var $back_link = $("#s-content").find('h1 a.back.order-list');

                $back_link.show();

                // list item at sidebar menu
                var $menu_item = $("#s-all-orders");
                if ($menu_item.length && $menu_item.hasClass("selected")) {
                    var $link = $menu_item.find("a:first");
                    if ($link.length) {
                        $back_link.attr("href", $link.attr("href"));
                    }
                }
            });

            if ($.order_list) {
                $.order_list.finit();
            }
        },

        //
        // Various helpers
        //

        buildOrdersUrlComponent: function(params) {
            var params_str = '';
            for (var name in params) {
                if (params.hasOwnProperty(name) && name !== 'view') {
                    params_str += '&' + name + '=' + params[name];
                }
            }
            return 'view=' + (params.view || this.options.view) + params_str;
        },

        /** Helper to load data into main content area. */
        load: function (url, options, fn) {
            if (typeof options === 'function') {
                fn = options;
                options = {};
            } else {
                options = options || {};
            }
            var r = Math.random();
            this.random = r;
            var self = this;
            return  $.get(url, function(result) {
                if ((typeof options.check === 'undefined' || options.check) && self.random != r) {
                    // too late: user clicked something else.
                    return;
                }
                (options.content || $("#s-content")).removeClass('bordered-left').html(result);
                if (typeof fn === 'function') {
                    fn.call(this);
                }

                // $('html, body').animate({scrollTop:0}, 200);
                var $window = $(window);
                setTimeout( function () {
                    $window.trigger("scroll");
                }, 250);

                showOrdersViewToggle();
                showOrdersSortMenu();


                $('.level2').show();
                $('#s-sidebar').width(200).show();


                self.checkAlerts();
            });

            function showOrdersViewToggle() {
                var $ordersViewToggle = $("#s-orders-views"),
                    is_orders_page = $("#s-order, #s-orders").length;

                if ($ordersViewToggle.length) {
                    if (is_orders_page) {
                        $ordersViewToggle.css("visibility", "visible");
                    } else {
                        $ordersViewToggle.css("visibility", "hidden");
                    }
                }
            }

            function showOrdersSortMenu() {
                var $ordersSortMenu = $("#s-orders-sort"),
                    is_orders_page = $("#s-order, #s-orders").length;

                if ($ordersSortMenu.length) {
                    if (is_orders_page) {
                        $ordersSortMenu.css("visibility", "visible");
                    } else {
                        $ordersSortMenu.css("visibility", "hidden");
                    }
                }
            }
        },


        checkAlerts: function () {
            var alerts = $.storage.get('shop/alerts');
            $.shop.trace('checkAlerts',alerts);
            $('.s-alert').each(function () {
                if ($.inArray($(this).data('alert'), alerts) == -1) {
                    $(this).show();
                }
            });
        }
    };
})(jQuery);
;
( function($) {

    $.order_list = {

        /**
         * Current order
         * {Number}
         */
        id: 0,

        /**
         * {Object}
         * */
        options: {},

        /**
         * Jquery object related to list container
         * {Object|null}
         */
        container: null,

        /**
         * Jquery object
         * {Object|null}
         */
        $selectionMenu: null,

        /**
         * Jquery object related to sidebar
         * {Object|null}
         */
        sidebar: null,

        /**
         * Jquery object related to 'select all checkbox input'
         * {Object|null}
         */
        select_all_input: null,

        /**
         * Params by which list is filtered
         * {Object}
         */
        filter_params: {},

        /**
         * Params by which list is filtered (for passing to lazy-loader)
         * {String}
         */
        filter_params_str: '',

        /**
         * Params of dispatching
         * {Object}|null
         */
        params: null,

        /**
         * Id of timer
         * {Number}
         */
        timer_id: 0,

        /**
         * Jquery object to to which lazy_loader is bined
         * {Object}
         */
        lazy_load_win: null,

        /**
         * Cache of all printforms
         * {Object}|null
         */
        all_printforms: null,

        /**
         * Sort of list
         */
        sort: ['create_datetime', 'desc'],

        /**
         * Collection of xhr-deffered objects for synchronization
         * {Object}
         */
        xhrs: {
            lazy_load: null,
            update_load: null,
            printforms: null
        },


        init: function(options) {
            this.options = options = options || {};
            this.filter_params = options.filter_params || {};
            this.filter_params_str = options.filter_params_str || '';
            this.container = $('#order-list');

            if (options.view == 'table') {
                this.container = $('#order-list').find('tbody:first');
                this.$selectionMenu = this.options["$selectionMenu"];
                if (this.$selectionMenu) {
                    $("#mainmenu .s-level2").append(this.$selectionMenu);
                    this.select_all_input = this.$selectionMenu.find('.s-order-list-select-all');
                    this.select_all_input.attr('checked', false);
                }
            }

            // for define which actions available for whole order list (see onSelectItem)
            this.options.all_order_state_ids = this.options.all_order_state_ids || null;

            this.sidebar = $('#s-sidebar');
            this.id = options.id || 0;

            if (options.orders && options.orders.length && options.view) {
                try {
                    // template variants:
                    // template-order-list-table
                    // template-order-list-split
                    this.container.append(
                        tmpl('template-order-list-' + this.options.view, {
                            orders: options.orders
                        }, true
                    ));
                    this.container.trigger('append_order_list', [options.orders]);
                } catch (e) {
                    if (console) {
                        console.log(e.stack);
                    }
                    return this;
                }
                delete options.orders;
                delete this.options.orders;
            }

            if (options.lazy_loading) {
                this.initLazyLoad(options.lazy_loading);
            }

            if (options.counters) {
                this.updateCounters(options.counters);
            }

            if (options.update_process && options.count) {
                this.updateProcess('run', options.update_process);
            }

            if (options.sort && options.sort[0]) {
                options.sort[0] = '' + options.sort[0];
                var available_sort_values = $('#s-orders-sort .s-sort').map(function () {
                    var sort = $(this).data('sort') || '';
                    return sort ? sort : false;
                }).toArray();
                if (available_sort_values.indexOf(options.sort[0]) < 0) {
                    options.sort[0] = available_sort_values[0];
                }
                options.sort[1] = (options.sort[1] || '');
                options.sort[1] = options.sort[1].toLowerCase() === 'desc' ? 'desc' : 'asc';
                this.sort = options.sort;
            }

            this.initView();
        },

        initLazyLoad: function(options) {
            var self = this;
            var count = self.options.count;
            var total_count = self.options.total_count;

            var win = $(window);

            win.lazyLoad('stop');
            if (count < total_count) {
                win.lazyLoad({
                    container: this.options.view ? self.container : win,
                    state: (typeof options.auto === 'undefined' ? true: options.auto) ? 'wake' : 'stop',
                    hash: ['orders', ''],   // ['', 'orders']
                    load: function() {
                        win.lazyLoad('sleep');
                        $('.lazyloading-link').hide();
                        $('.lazyloading-progress').show();
                        var last_li = self.container.find('.order:last');
                        var id = parseInt(last_li.attr('data-order-id'), 10);
                        if (!id) {
                            console.log("Unkown last item");
                            win.lazyLoad('stop');
                            return;
                        }
                        var process = function() {
                            return $.getJSON(self.buildLoadListUrl(id),
                                    function (r) {

                                        if (r.status == 'ok') {
                                            try {
                                                self.container.append(
                                                    tmpl('template-order-list-' + self.options.view, {
                                                        orders: r.data.orders,
                                                        check_all: self.options.view == 'table' ? self.select_all_input.attr('checked') : false
                                                    }
                                                ));
                                                self.container.trigger('append_order_list', [r.data.orders]);
                                                var order = self.container.find('[data-order-id='+self.options.id+']');
                                                if (order.length) {
                                                    self.container.find('.selected').removeClass('selected');
                                                    self.container.find('[data-order-id='+self.options.id+']').addClass('selected');
                                                }
                                            } catch (e) {
                                                if (console) {
                                                    console.log(e.stack);
                                                }
                                                win.lazyLoad('stop');
                                                return;
                                            }

                                            $('.lazyloading-progress-string').text(r.data.progress.loaded + ' ' + r.data.progress.of);
                                            $('.lazyloading-progress').hide();
                                            $('.lazyloading-chunk').text(r.data.progress.chunk);

                                            if (r.data.loaded >= r.data.total_count) {
                                                win.lazyLoad('stop');
                                                $('.lazyloading-link').hide();
                                            } else {
                                                $('.lazyloading-link').show();
                                                win.lazyLoad('wake');
                                            }
                                        } else {
                                            if (console) {
                                                console.log('Error when loading orders: ' + r.errors);
                                            }
                                            win.lazyLoad('stop');
                                        }
                                    }
                                ).error(function(r) {
                                    if (console) {
                                        if (r && r.errors) {
                                            console.log('Error when loading orders: ' + r.errors);
                                        } else if (r) {
                                            console.log(r);
                                        } else {
                                            console.log('Error when loading orders');
                                        }
                                    }
                                    win.lazyLoad('stop');
                                });
                        };
                        if (self.xhrs.update_load === null) {
                            self.xhrs.lazy_load = process();
                        } else {
                            self.xhrs.update_load.then(function() {
                                self.xhrs.lazy_load = process();
                            });
                        }
                    }
                });
                $('#s-orders').off('click', '.lazyloading-link').
                    on('click', '.lazyloading-link', function() {
                        win.lazyLoad('force');
                        return false;
                    }
                );
                this.lazy_load_win = win;
            }
        },

        initView: function() {
            var that = this;

            this.initSortMenu();

            this.initSidebar();
            if (this.options.view == 'table' && that.$selectionMenu && that.$selectionMenu.length) {
                this.initSelecting();
            }
            if (this.options.id) {
                this.loadOrder(this.options.id);
            }
            var orders_view_ul = $('#s-orders-views');
            orders_view_ul.find('li.selected').removeClass('selected');
            orders_view_ul.find('li[data-view="'+this.options.view+'"]').addClass('selected');
            orders_view_ul.find('li a').each(function() {
                var self = $(this);
                var li = $(this).parents('li:first');
                self.attr('href', '#/orders/view=' + li.attr('data-view') + ($.order_list.options.filter_params_str ? '&'+$.order_list.options.filter_params_str : '') + '/');
            });


            var performAction = function(action_id, selected_orders, onFinish) {

                // ensure that we load chunk of order list to common list of orders
                var ensureOrderListChunkLoaded = function () {
                    var $win = $(window),
                        def = $.Deferred();

                    // make sense only for all selected orders and lazy loading initialized and not yet loaded all list of orders
                    if (!selected_orders.all || !that.options.lazy_loading || $win.lazyLoad('get', 'stopped')) {
                        def.resolve();
                        return def;
                    }

                    var event_name = 'append_order_list.ensureOrderListChunkLoaded';

                    that.container.one(event_name, function () {
                        def.resolve();
                    });

                    // safe timeout - after 2 seconds conclude that we load chunk anyway
                    setTimeout(function () {
                        that.container.off(event_name);
                        def.resolve();
                    }, 2000);

                    // load chunk
                    $win.lazyLoad('force');

                    return def;
                };

                // update chunk of order list (change status)
                var updateOrderListChunk = function (r) {
                    var def = $.Deferred();

                    if ($.isEmptyObject(r.data.orders)) {
                        def.resolve();
                        return def;
                    }

                    var event_name = 'append_order_list.updateOrderListChunk';

                    that.container.one(event_name, function () {
                        def.resolve();
                    });

                    // safe timeout - after 1 second conclude that we load chunk anyway
                    setTimeout(function () {
                        that.container.off(event_name);
                        def.resolve();
                    }, 1000);

                    that.updateListItems(r.data.orders);

                    return def;
                };

                // hide chunk of order list after some timeout
                var hideOrderListChunk = function (r) {
                    var def = $.Deferred();

                    var showEmptyListHtml = function () {
                        if (!that.container.find('.order:not(:hidden):first').length) {
                            var html = '<div class="block double-padded align-center blank"><br><br><br><br><span class="gray large">'+$_("There are no orders in this view.")+'</span><div class="clear-left"></div></div></div>';
                            $('#s-content').html(html);
                        }
                    };

                    var ids = [];
                    var filter_params = that.filter_params;
                    if (!$.isEmptyObject(r.data.orders)) {
                        for (var i = 0, n = r.data.orders.length; i < n; i++) {
                            if (!$.isEmptyObject(filter_params) && filter_params.state_id) {
                                if ($.type(filter_params.state_id) === 'string' && filter_params.state_id !== r.data.orders[i].state_id) {
                                    ids.push(r.data.orders[i].id);
                                } else if ($.type(filter_params.state_id) === 'array' && filter_params.state_id.indexOf(r.data.orders[i].state_id) === -1) {
                                    ids.push(r.data.orders[i].id);
                                }
                            }
                        }
                    }

                    if (!$.isEmptyObject(ids)) {
                        that.hideListItems(ids).done(function() {
                            showEmptyListHtml();
                            def.resolve();
                        });

                        // safe timeout - after 1 second conclude that we load chunk anyway
                        setTimeout(function () {
                            def.resolve();
                        }, 1000);

                    } else {
                        showEmptyListHtml();
                        def.resolve();
                    }

                    return def;
                };

                var updateSidebarCounters = function (r) {
                    $.order_list.updateCounters({
                        state_counters: r.data.state_counters,
                        common_counters: {
                            pending: r.data.pending_count
                        }
                    });
                };

                var eachStep = function (r) {
                    var def = $.Deferred();

                    ensureOrderListChunkLoaded().done(function () {
                        updateOrderListChunk(r).done(function () {
                            hideOrderListChunk(r).done(function () {
                                updateSidebarCounters(r);
                                //that.count
                                def.resolve();
                            });
                        })
                    });

                    return def;
                };

                var step = function(offset, onFinish) {
                    offset = offset || 0;

                    $.shop.jsonPost(
                        '?module=orders&action=performAction' +
                            '&id='+action_id +
                            '&offset=' + offset +
                            '&' + that.options.filter_params_str,
                        selected_orders,
                        function(r) {
                            if (r.status === 'ok') {
                                eachStep(r).done(function () {
                                    if (r.data.offset < r.data.total_count) {
                                        step(r.data.offset, onFinish);
                                    } else {
                                        onFinish(r);
                                    }
                                });
                            } else {
                                onFinish(r);
                            }
                        }
                    );
                };

                step(0, onFinish);
            };

            if (that.$selectionMenu) {
                that.$selectionMenu
                    .off("click.order_list", ".js-wf-action-item")
                    .on("click.order_list", ".js-wf-action-item",
                        function () {
                            var $item = $(this),
                                action_id = $item.data("action-id");

                            // disabled menu item
                            if ($item.hasClass('s-disabled')) {
                                return;
                            }

                            if (action_id) {
                                onActionClick(action_id);
                            }
                            return false;
                        }
                    );
            }

            function onActionClick( action_id ) {

                var selected_orders = $.order_list.getSelectedOrders();

                var perform = function () {

                    that.$selectionMenu.addClass('s-disabled');
                    that.$selectionMenu.find('.js-selection-menu-loading').show();
                    that.select_all_input.attr('disabled', true);

                    performAction(action_id, selected_orders, function () {
                        that.$selectionMenu.removeClass('s-disabled');
                        that.$selectionMenu.find('.js-selection-menu-loading').hide();
                        that.select_all_input.removeAttr('disabled');
                        that.select_all_input.trigger('select', false);

                        $.orders.dispatch();
                    });
                };

                if (selected_orders.all) {
                    if (confirm($_('Perform action to all selected orders?'))) {
                        perform();
                    }
                } else {
                    perform();
                }
            }

        },

        loadOrder: function(order_id) {
            this.container.find('.selected').removeClass('selected');
            this.container.find('[data-order-id=' + order_id + ']').addClass('selected');

            var order_title = $('#s-order-title');
            order_title.find('.loading').show();
            $.orders.load(
                '?module=order&id= ' + order_id + '&' + this.filter_params_str,
                { content: $('#s-order') },
                function() {
                    this.id = order_id;
                }
            );
        },

        getSelectedOrders: function(serialize) {
            serialize = serialize || false;
            var data = { count: 0, all: false };
            if (this.select_all_input.attr('checked')) {
                data.all = true;
                var filter_params = $.order_list.filter_params;
                if (serialize) {
                    data.serialized = [];
                    if ($.isEmptyObject(filter_params)) {
                        data.serialized.push({ name: 'filter_params', value: '' });
                    } else {
                        $.each(filter_params, function (key, value) {
                            if ($.isArray(value)) {
                                $.each(value, function (k, v) {
                                    data.serialized.push({ name: 'filter_params[' + key + '][' + k + ']', value: v });
                                });
                            } else {
                                data.serialized.push({ name: 'filter_params[' + key + ']', value: value });
                            }
                        });
                    }
                } else {
                    data.filter_params = $.isEmptyObject(filter_params) ? '' : filter_params;
                }
                data.count = this.options.total_count;
            } else {
                if (serialize) {
                    data.serialized = $.order_list.container.find('.order.selected').map(function() {
                        data.count += 1;
                        return { name: 'order_id[]', value: $(this).attr('data-order-id') };
                    }).toArray();
                } else {
                    data.order_id = $.order_list.container.find('.order.selected').map(function() {
                        data.count += 1;
                        return $(this).attr('data-order-id');
                    }).toArray();
                }
            }
            return data;
        },

        initSortMenu: function () {

            var $menu = $('#s-orders-sort');

            // update ui menu helper
            var update = function (sort, change_hash) {
                var sort_field = sort[0];
                var sort_order = sort[1];
                var text = $('.s-sort[data-sort="' + sort_field + '"] a', $menu).text();
                $menu.find('.s-current-sort').data('sort', sort_field);
                $menu.find('.s-current-sort').data('order', sort_order);
                $menu.find('.s-current-sort .f-text').text(text);
                $menu.find('.s-sort-order').hide().filter('[data-order="' + sort_order + '"]').show();
                if (change_hash) {

                    var hash = window.location.hash || '';

                    hash = hash.replace(/(^[^#]*#\/*|\/$)/g, ''); /* fix syntax highlight*/

                    if (!hash.split('/')[1]) {
                        hash = '#/orders/state_id=new|processing|auth|paid'
                    }

                    // clear hash, delete substring like sort[0]=foo and sort[1]=bar
                    hash = hash.replace(/(&*sort\[[01]\]=.*?[&\/]|&*sort\[[01]\]=.*?$)/g, '');

                    // check if exists any params in hash
                    var params_tail_exists = hash.indexOf('=') > 0;

                    if (params_tail_exists) {
                        // delete / and & in the end of hash
                        hash = hash.replace(/[\/&]$/, '');
                    }
                    // append new sort params
                    hash += (params_tail_exists ? '&' : '') + 'sort[0]=' + sort_field + '&sort[1]=' + sort_order + '/';

                    // update page
                    $.wa.setHash(hash);

                }
            };

            update(this.sort);

            // prevent binding events twice, cause menu item located in layout block and it isn't updated when inner content changed
            if (!$menu.data('inited')) {

                // when click to option click, change sort and order
                $menu.find('.s-sort a').click(function () {
                    var el = $(this);
                    var data = $menu.find('.s-current-sort').data();
                    var sort_field = data.sort;
                    var sort_order = data.order;
                    if (el.data('sort') === sort_field) {
                        sort_order = sort_order === 'desc' ? 'asc' : 'desc';
                    } else {
                        sort_field = el.data('sort');
                        sort_order = 'desc';
                    }
                    update([sort_field, sort_order], true);
                });

                $menu.data('inited', 1);
            }
        },

        initSidebar: function() {
            var sidebar = this.sidebar;

            // Replace list view type in all links in sidebar
            var view = this.options.view;
            sidebar.find('li.list a').each(function() {
                var item = $(this);
                var href = item.attr('href');
                var match = href.match(/view=((.*)&|(.*)\/|(.*))/);
                if (match) {
                    item.attr('href', href.replace('view='+(match[2]||match[3]||match[4]), 'view='+view));
                } else if ( ( match = href.match(/^#\/orders\/hash\/(.*?)\/?$/))) {/* */
                    item.attr('href', '#/orders/view='+view +'&hash='+encodeURIComponent(match[1])+'/');
                } else {
                    match = href.match(/orders\/((.*)\/|(.*))/);
                    var chunk = '';
                    if (match) {
                        if (match[1]) {
                            chunk = match[2] || match[3];
                            chunk += '&view=' + view;
                        } else {
                            chunk = 'view=' + view;
                        }
                        item.attr('href', '#/orders/' + chunk + '/');
                    }
                }
            });

            // Change active list view selection
            var $prev_li_selected = sidebar.find('li.selected').removeClass('selected');
            if (this.filter_params.state_id) {
                // Highlight a state
                if ($.isArray(this.filter_params.state_id)) {
                    $('#s-pending-orders').addClass('selected');
                } else {
                    sidebar.find('li[data-state-id="'+this.filter_params.state_id+'"]').addClass('selected');
                }
            } else if (this.filter_params.contact_id) {
                sidebar.find('li[data-contact-id='+this.filter_params.contact_id+']').addClass('selected');
            } else if (this.filter_params.storefront) {
                // Highlight storefront
                var decoded_url = decodeURIComponent(this.filter_params.storefront);
                if (decoded_url.slice(-1) === '/') {
                    decoded_url = decoded_url.slice(0, -1);
                }
                sidebar.find('li[data-storefront="'+decoded_url+'"]').addClass('selected');
            } else if (!$.order_list.filter_params_str) {
                $('#s-all-orders').addClass('selected');
            } else {
                // Do our best to highlight based on hash match
                var $li = sidebar.find('[href="'+window.location.hash+'"]:first').closest('li').addClass('selected');

                // When everything failed, leave the old selection
                if (!$li.length) {
                    $prev_li_selected.addClass('selected');
                }
            }

            sidebar.find('li.list a').unbind('click.order_list').bind('click.order_list', function() {
                // Highlight link in sidebar right avay after a click to be responsive.
                sidebar.find('li.selected').removeClass('selected');
                $(this).closest('li').addClass('selected');

                // Reload view even if user clicked on the active link again
                var hash = $(this).attr('href').replace(/(^[^#]*#\/*|\/$)/g, ''); /* fix syntax highlight*/
                if (hash == $.orders.hash) {
                    var params = $.orders.hash.replace('orders/', '');
                    if (params !== $.orders.hash) {
                        // Only support #/orders/* hashes and ignore everything else
                        $.orders.ordersAction.apply($.orders, params.split('/'));
                    }
                }
            });
        },

        /**
         * Update UI enable/disable statuses of selection menu items by workflow states
         * @param {Array|String} state_id One or list of workflow states available now
         */
        updateSelectionMenuActionItemsByStates: function(state_id) {
            var that = this;

            // state_ids, typecast input argument
            var state_ids = [];
            if (typeof state_id === 'string') {
                state_ids.push(state_id);
            } else if ($.isArray(state_id)) {
                state_ids = [].concat(state_id)
            } else {
                // unsupported input type
                return;
            }

            var $action_items = that.$selectionMenu.find('.wf-actions .js-wf-action-item');

            // all items disabled at beginning
            $action_items.addClass('s-disabled');

            // state_id => [action_id]
            var enabled_states_actions = {};

            // collect { state_id => [action_id] } map, for each state get list of available actions
            $action_items.each(function () {
                var $item = $(this),
                    action_id = $item.data('actionId'),
                    available_for_states_str = $item.data('availableForStates'),
                    available_for_states = available_for_states_str.split(',');

                // loop over state_ids and define available actions for each state
                for (var i = 0; i < state_ids.length; i++) {
                    var current_state_id = state_ids[i];

                    // ensure that state is string (cause state could be possible integer and indexOf will not works)
                    current_state_id = '' + current_state_id;

                    if (available_for_states.indexOf(current_state_id) !== -1) {
                        enabled_states_actions[current_state_id] = enabled_states_actions[current_state_id] || [];
                        enabled_states_actions[current_state_id].push(action_id);
                    }
                }
            });

            // now calculate intersection for all states we has
            var enable_actions = $.shop.intersectArrays($.shop.getValues(enabled_states_actions), true);

            // and UI enable actions itself
            if (enable_actions.length > 0) {
                var $enabled_items = $action_items.filter(function () {
                    return $.inArray($(this).data('actionId'), enable_actions) > -1;
                });
                $enabled_items.removeClass('s-disabled');
            }
        },

        enableAllSelectionMenuActionItems: function() {
            var that = this;
            that.$selectionMenu.find('.wf-actions .js-wf-action-item').removeClass('s-disabled');
        },

        disableAllSelectionMenuActionItems: function() {
            var that = this;
            that.$selectionMenu.find('.wf-actions .js-wf-action-item').addClass('s-disabled');
        },

        initSelecting: function() {
            var that = this,
                container = this.container,
                select_all_input = this.select_all_input;


            // update ui state on action items in selection menu
            if (that.filter_params && that.filter_params.state_id && select_all_input.is(':checked')) {
                that.updateSelectionMenuActionItemsByStates(that.filter_params.state_id);
            }

            select_all_input.click(function() {
                $(this).trigger('select', this.checked);
            });


            // Hide action panel if user open other window
            $(window).one('wa_before_dispatched',function (e) {
                that.$selectionMenu.hide();
            });

            that.xhrs.printforms = null;

            var renderPrintforms = function(data) {
                var html = tmpl('template-order-list-printforms-menu-items', data);
                var $ul = that.$selectionMenu.find('.wf-actions');
                $ul.find('.s-printform-item,.s-printform-item-sep,.s-printform-item-button').remove();
                $ul.append(html)
            };

            // when 'shift' held on prevent default browser selecting
            $(document).keydown(function(e) {
                if (e.keyCode == 16 && !$(e.target).closest('.redactor-box').length) {
                    document.body.onselectstart = function() { return false; };
                }
            }).keyup(function(e) {
                if (e.keyCode == 16) {
                    document.body.onselectstart = null;
                }
            });

            var onSelectItem = function() {

                var $table = $('#order-list'),
                    is_all_selected = select_all_input.attr("checked"),
                    is_one_selected = ( $table.find('.order.selected:first').length ),
                    is_selected = is_all_selected || is_one_selected;

                // guard case - hide menu and this just it
                if (!is_selected) {
                    that.$selectionMenu.hide();
                    return;
                }

                // below a little bit more complicated logic

                // first of all show menu
                that.$selectionMenu.show();

                // current list of order states (null means not defined for some reason)
                var state_ids = null;

                if (is_all_selected) {
                    if (that.options.all_order_state_ids) {                             // option from controller
                        state_ids = that.options.all_order_state_ids;
                    } else if (that.filter_params && that.filter_params.state_id) {     // or filter by state_id
                        state_ids = that.filter_params.state_id;
                    } else {
                        state_ids = null;                                               // or undefined (select all actions)
                    }
                } else {
                    // Extract all state ids from DOM items
                    // Not so effective solution, but simple to understand
                    // For example effective solution could be: keep track { state_id => count } map to dynamically has all "selected" state ids in current moment
                    state_ids = that.container.find('.order.selected').map(function() {
                        return $(this).data('stateId');
                    }).toArray();
                }

                // update UI state of menu
                if (state_ids !== null) {
                    state_ids = $.shop.getUniqueValues(state_ids);
                    that.updateSelectionMenuActionItemsByStates(state_ids);
                } else {
                    that.enableAllSelectionMenuActionItems();
                }

            };

            // handler of triggerable 'select' event
            container.off('select', '.order').on('select', '.order', function(e, selected) {
                selected = selected !== undefined ? selected : true;
                if (selected) {
                    $(this).addClass('selected').find('input:first').attr('checked', true);
                } else {
                    $(this).removeClass('selected').find('input:first').attr('checked', false);
                    if (select_all_input.is(':checked')) {
                        select_all_input.attr('checked', false);
                    }
                }
                onSelectItem();
                return false;
            });

            var loadPrintforms = function () {
                that.xhrs.printforms && that.xhrs.printforms.abort();

                renderPrintforms({
                    printforms: []
                });
                that.xhrs.printforms = null;
                if (select_all_input.is(':checked') && $.order_list.all_printforms !== null) {
                    renderPrintforms({
                        printforms: $.order_list.all_printforms
                    });
                    return;
                }

                that.xhrs.printforms = $.shop.getJSON(
                    '?module=orders&action=printforms',
                    that.getSelectedOrders(),
                    function (r) {
                        if (!$.isEmptyObject(r.data.printforms)) {
                            if (select_all_input.is(':checked')) {
                                $.order_list.all_printforms = r.data.printforms;
                            }
                            renderPrintforms(r.data);
                            that.xhrs.printforms = null;
                        }
                    }
                );
            };

            select_all_input.unbind('select').bind('select', function(e, selected) {
                selected = selected !== undefined ? selected : true;
                var self = $(this);
                if (selected) {
                    self.attr('checked', true);
                    container.find('.order').trigger('select', true, false);
                } else {
                    self.attr('checked', false);
                    container.find('.order').trigger('select', false, false);
                }
                loadPrintforms();
            });

            container.off('click', '.order input').on('click', '.order input', function(e) {
                var shiftKey = e.shiftKey,
                    checked = this.checked;
                var self = $(this).parents('.order:first');

                if (checked) {
                    self.addClass('selected');
                } else {
                    if (select_all_input.is(':checked')) {
                        select_all_input.attr('checked', false);
                    }
                    self.removeClass('selected');
                }

                if (shiftKey && checked) {   // when hold shift
                    var started = container.data('last_checked');
                    if (!started) {
                        started = container.find('.order:first').trigger('select', true);
                    }

                    // try find started before current
                    var found = self.prevAll('.selected[data-order-id='+started.attr('data-order-id')+']');
                    var item;
                    if (found.length) {
                        item = self.prev();
                        started = started.get(0);
                        while (item.length && started != item.get(0)) {
                            item.addClass('selected').find('input').attr('checked', true);
                            item = item.prev();
                        }
                    } else {
                        found = self.nextAll('.selected[data-order-id='+started.attr('data-order-id')+']');
                        if (found.length) {
                            item = self.next();
                            started = started.get(0);
                            while (item.length && started != item.get(0)) {
                                item.addClass('selected').find('input').attr('checked', true);
                                item = item.next();
                            }
                        }
                    }
                    if (!container.data('last_checked') && !found.length) {
                        started.trigger('selected', false);
                    }
                }
                if (checked) {
                    container.data('last_checked', self);
                }
                onSelectItem();
                loadPrintforms();

            });

            var printPrintforms = function(printforms, selected_orders) {

                var limit = 100;
                if (selected_orders.count > limit) {
                    alert($_('Maximum of %d orders is allowed for bulk form printing.').replace('%d', limit));
                    return;
                }

                var url = '?module=orders&action=printformsDisplay';

                var params_str = $.map(selected_orders.serialized, function (item) {
                    return item.name + '=' + item.value;
                }).join('&');
                var forms_str = $.map(printforms, function (form) {
                    return 'form[]=' + form;
                }).join('&');

                url += '&' + params_str + '&' + forms_str;

                var target_id = ('' + Math.random()).slice(2);
                window.open(url, target_id);
            };

            that.$selectionMenu.off('click.printforms').on('click.printforms', '.s-printform-item-button', function (e) {
                e.preventDefault();

                that.xhrs.printforms && that.xhrs.printforms.abort();
                that.xhrs.printforms = null;

                // collect forms
                var forms = that.$selectionMenu.find('.s-printform-item :checkbox').map(function () {
                    var $this = $(this);
                    var checked = $this.is(':checked');
                    if (!checked) {
                        return false;
                    }
                    return $this.data('id');
                }).toArray();

                if (!forms.length) {
                    return;
                }

                var selected_orders = that.getSelectedOrders(true);
                var count = selected_orders.count;
                if (count <= 0) {
                    return;
                }

                printPrintforms(forms, selected_orders);

                return false;
            });

        },

        updateTitle: function(title_suffix, count) {
            count = parseInt(count, 10) || 0;

            // context is mentioned in title
            var context = '';
            if (this.options.state_names) {
                if (this.filter_params.state_id) {
                    if (typeof this.filter_params.state_id === 'string') {
                        var state_id = this.filter_params.state_id;
                        context = this.options.state_names[state_id];
                    } else if ($.isArray(this.filter_params.state_id)) {
                        context = $_('Processing');
                    }
                } else {
                    context = $_('All orders');
                }
            }

            if (count) {
                document.title = '(' + count + ') ' + context + (title_suffix || '');
            } else {
                document.title = context + title_suffix;
            }
        },

        /**
         * @param {Object} counters
         *
         * Format: {
         *     state_counters: {
         *         new: '10' // string. Support incrementing, i.e.: '+5', '-7',
         *         processing: '10' // ....
         *     },
         *     common_counters: {
         *         pending: '5' // pending counter
         *     }
         * }
         *
         */
        updateCounters: function(counters) {
            var sidebar = this.sidebar;
            if (!sidebar) {
                sidebar = $('#s-sidebar');
            }
            var ext_new_counter = $('#s-pending-orders .small');
            for (var name in counters) {
                if (counters.hasOwnProperty(name)) {
                    var cntrs = counters[name];
                    for (var id in cntrs) {
                        if (cntrs.hasOwnProperty(id)) {
                            var item;
                            if (name == 'common_counters') {
                                item = $('#s-' + id + '-orders .count');
                            } else {
                                if (name === 'storefront_counters') {
                                    item = sidebar.find('li[data-'+name.replace('_counters', '')+'="'+id+'"] .count');
                                } else {
                                    item = sidebar.find('li[data-'+name.replace('_counters', '')+'-id='+id+'] .count');
                                }
                            }
                            var prev_cnt = parseInt(item.text(), 10) || 0;
                            var cnt = 0;
                            cntrs[id] = '' + cntrs[id];
                            if (cntrs[id].substr(0, 1) == '+') {
                                cnt = prev_cnt + (parseInt(cntrs[id].substr(1), 10) || 0);
                                item.text(cnt);
                            } else if (cntrs[id].substr(0, 1) == '-') {
                                cnt = prev_cnt - (parseInt(cntrs[id].substr(1), 10) || 0);
                                cnt = cnt < 0 ? 0 : cnt;
                                item.text(cnt);
                            } else {
                                cnt = parseInt(cntrs[id], 10) || 0;
                                item.text(cnt);
                            }
                            if (id == 'new') {
                                ext_new_counter.text(cnt ? '+' + cnt : '');
                                $.shop.updateAppCounter(cnt);
                                this.updateTitle(this.options.title_suffix, parseInt(cnt, 10));
                            }
                        }
                    }
                }
            }
        },

        updateListItems: function(data) {
            var self = this;
            var tmpl_name = 'template-order-list-'+this.options.view;
            if (document.getElementById(tmpl_name)) {
                var container = this.container;
                if (!$.isArray(data)) {
                    data = [data];
                }
                var rendered = $('<div></div>').append(tmpl(tmpl_name, {
                    orders: data,
                    check_all: self.options.view == 'table' ? self.select_all_input.attr('checked') : false
                }));
                var context = $('.order', container);
                $('.order', rendered).each(function() {
                    var item = $(this);
                    context.filter('[data-order-id='+item.attr('data-order-id')+']').replaceWith(item);
                });
                rendered.remove();
                self.container.trigger('append_order_list', [data]);
            }
        },

        hideListItems: function(id) {
            // deffered fiber
            var d = $.Deferred();
            setTimeout(function() {
                if ($.order_list && $.order_list.container && $.order_list.container.length) {
                    if (!$.isArray(id)) {
                        var items = $.order_list.container.find('.order[data-order-id='+id+']');
                    } else {
                        var context = $.order_list.container.find('.order');
                        var items = $();
                        for (var i = 0; i < id.length; i++) {
                            var item = context.filter('[data-order-id='+id[i]+']');
                            items = items.add(item);
                        }
                    }
                    var length = items.length;
                    var count = 0;
                    items.slideUp(450, function() {
                        count++;
                        if (count >= length) {
                            d.resolve();
                        }
                    });
                }
            }, 1000);
            return d.promise();
        },

        dispatch: function(params, hard) {
            if (typeof params === 'string') {
                params = $.shop.helper.parseParams(params);
            }
            var loaders = {
                list: function() {
                    $.order_list.finit();
                    $.orders.load('?module=orders&' + $.orders.buildOrdersUrlComponent(params), function() {
                        $.order_list.dispatch(params);
                    });
                },
                order: function() {
                    $.order_list.loadOrder(params.id);
                }
            };

            if (this.params === null) {     // order-list is just loaded
                this.params = params;
                if (hard) {
                    loaders.list();
                }
                return;
            }
            if (params.id) {  // order-list is loaded and id is changing
                if (hard || params.id != this.params.id) {
                    loaders.order();
                    this.params = params;
                    return;
                }
            }
            // params of order-list is changing
            if (hard || this.diff(params, this.params) || this.diff(this.params, params)) {
                loaders.list();
            }
        },

        diff: function(params1, params2) {
            for (var name in params1) {
                if (!params1.hasOwnProperty(name) || name == 'id') {
                    continue;
                }
                if (params1[name] !== params2[name]) {
                    return true;
                }
            }
            return false;
        },

        /**
         * @param {Number} id
         * @param {Boolean} lt (less than order with id, i.e. new orders). Default: falsy
         * @param {Boolean} counters (load list counters). Default: falsy
         * @returns {String}
         */
        buildLoadListUrl: function(id, lt, counters) {
            return '?module=orders&action=loadList&id=' + id +
                (this.filter_params_str ? '&' + this.filter_params_str : '') +
                (lt ? '&lt=1' : '') +
                (counters ? '&counters=1' : '') +
                (this.options.view ? '&view='+this.options.view : '') +
                ('&sort[0]=' + this.sort[0] + '&sort[1]=' + this.sort[1]);
        },

        updateProcess: function(status, options) {
            status = status || 'run';
            options = options || {};
            timeout = options.timeout || 60000;
            var self = this;
            var killProcess = function() {
                if (self.timer_id !== null) {
                    clearTimeout(self.timer_id);
                    self.timer_id = null;
                }
                if (self.xhrs.update_load !== null) {
                    self.xhrs.update_load.abort();
                    self.xhrs.update_load = null;
                }
            };
            killProcess();

            if (status == 'run') {
                var process = function(success, error) {
                    var first_li = self.container.find('.order:first');
                    var id = parseInt(first_li.attr('data-order-id'), 10) || 0;
                    return $.getJSON(self.buildLoadListUrl(id, true, true),
                            function (r) {
                                if (r.status == 'ok') {
                                    if (!$.isEmptyObject(r.data.counters)) {
                                        self.updateCounters(r.data.counters);
                                    }

                                    if (r.data.count) {
                                        try {
                                            self.container.prepend(
                                                tmpl('template-order-list-' + self.options.view, {
                                                    orders: r.data.orders,
                                                    check_all: self.options.view == 'table' ? self.select_all_input.attr('checked') : false
                                                }
                                            ));
                                            $('.lazyloading-progress-string').text(r.data.progress.loaded + ' ' + r.data.progress.of);
                                            self.container.trigger('append_order_list', [r.data.orders]);
                                        } catch (e) {
                                            if (console) {
                                                console.log('Error: ' + e.message);
                                                error();
                                            }
                                            return;
                                        }
                                    }
                                    if (typeof success === 'function') {
                                        success(r);
                                    }
                                } else {
                                    if (console) {
                                        console.log('Error when loading new orders: ' + r.errors);
                                    }
                                    if (typeof error === 'function') {
                                        error();
                                    }
                                }
                            }
                        ).error(function(r) {
                            if (console) {
                                if (r && r.errors) {
                                    console.log('Error when loading new orders: ' + r.errors);
                                } else {
                                    console.log(['Error when loading new orders', r]);
                                }
                            }
                            if (typeof error === 'function') {
                                error();
                            }
                        });
                };
                var runProcess = function() {
                    self.timer_id = setTimeout(function() {
                        var pr = function() {
                            return process(runProcess, killProcess);
                        };
                        if (self.xhrs.lazy_load === null) {
                            self.xhrs.update_load = pr();
                        } else {
                            self.xhrs.lazy_load.then(function() {
                                self.xhrs.update_load = pr();
                            });
                        }
                    }, timeout);
                };
                runProcess();
            }
        },

        /**
         * Finiting inited process
         * @param {Boolean?} destruct If true destructing object (delete)
         */
        finit: function(destruct) {
            var xhrs = this.xhrs, win = this.lazy_load_win;
            for (var k in xhrs) {
                if (xhrs.hasOwnProperty(k) && xhrs[k] !== null) {
                    xhrs[k].abort();
                }
            }
            this.updateProcess('kill');
            if (win) {
                win.lazyLoad('stop');
            }
            this.params = null;
        }
    };

})(jQuery);
;
$.order_edit = {

    /**
     * {Number}
     */
    id: 0,

    /**
     * {Jquery object}
     */
    container: null,

    /**
     * {Jquery object}
     */
    form: null,

    /**
     * {ShopBackendOrderEditorCustomerForm}
     */
    customer_form: null,

    /**
     * {jQuery}
     */
    $storefront_selector: null,

    /**
     * {Array}
     */
    stocks: [],

    /**
     * On/off edit mode
     * {Boolen}
     */
    slide_on: false,

    /**
     * {Object}
     */
    options: {},

    locales: {},

    init: function (options) {
        this.options = options;
        if (options.id) {
            this.id = options.id;
        }
        this.container = typeof options.container === 'string' ? $(options.container) : options.container;
        this.form = typeof options.form === 'string' ? $(options.form) : options.form;

        this.$storefront_selector = $('#order-storefront');

        options.stocks.sort(function (a, b) {
            return a.sort - b.sort;
        });
        this.stocks = options.stocks;

        if (options.title) {
            document.title = title;
        }

        if (!options.float_delimeter) {
            options.float_delimeter = '.';
        }

        if (options.locales) {
            this.locales = options.locales;
        }

        //VAL
        this.float_delimeter = options.float_delimeter;
        this.prev_ship_method = null;

        /**
         * @event order_edit_init
         */
        this.container.trigger('order_edit_init');

        //INIT
        this.initView();
        this.initShippingControl();
        this.initDiscountControl();
        this.initCouponControl();
        this.initCustomerSourceControl(options.customer_sources);
    },

    /**
     * It is external method to call,
     * If not call - customer form not be inited (will be NULL)
     * So inside of order_edit always check customer_form for the not NULL before call its methods
     * @param {Object} options
     */
    initCustomerForm: function (options) {
        var that = this;
        that.customer_form = new ShopBackendOrderEditorCustomerForm($('#s-order-edit-customer'), that, options);
    },

    initView: function () {
        var that = this,
            options = that.options;

        this.initStorefrontSelector();

        // helpers and handlers here
        var updateStockIcon = function (order_item) {
            var select = order_item.find('.s-orders-sku-stock-select');
            var option = select.find('option:selected');
            var sku_item = order_item.find('.s-orders-skus').find('input[type=radio]:checked').parents('li:first');

            order_item.find('.s-orders-stock-icon-aggregate').show();
            order_item.find('.s-orders-stock-icon').html('').hide();

            // choose item to work with
            var item = sku_item.length ?
                sku_item :   // sku case
                order_item;  // product case (one sku)

            if (option.attr('data-icon')) {
                item.find('.s-orders-stock-icon-aggregate').hide();
                item.find('.s-orders-stock-icon').html(
                    option.attr('data-icon')
                ).show();
                order_item.find('.s-orders-stock-icon .s-stock-left-text').show();
                item.find('.s-orders-stock-icon .s-stock-left-text').hide();
            }
        };

        $.order_edit.slide(true, options.mode == 'add');

        this.container.find('.back').click(function () {
            if ($.order_edit.id) {
                $.order_edit.slide(false);
            } else {
                $.order_edit.slide(false, true);
            }
            $.orders.back();
            return false;
        });

        //Set container.data('order-content')
        this.getOrderItems(this.container, true);

        $('.s-order-item').each(function () {
            var item = $(this);
            updateStockIcon(item);
        });

        $('#order-currency').change(function () {
            $('#order-items .currency').html($(this).val());
            $.order_edit.options.currency = $(this).val();
        });

        var price_edit = options.price_edit || false;

        //Added new product in order
        var add_order_input = $("#orders-add-autocomplete");
        add_order_input.autocomplete({
            source: '?action=autocomplete&with_counts=1',
            minLength: 3,
            delay: 300,
            select: function (event, ui) {

                $('.s-order-errors').empty();
                var url = '?module=orders&action=getProduct&product_id=' + ui.item.id + '&order_id=' + $.order_edit.id + '&currency=' + $.order_edit.options.currency,
                    storefront = that.getStorefront();
                if (storefront) {
                    url += '&storefront=' + storefront;
                }

                $.getJSON(url, function (r) {
                    var table = $('#order-items');
                    var index = parseInt(table.find('.s-order-item:last').attr('data-index'), 10) + 1 || 0;
                    var product = r.data.product;
                    if (product.sku_id && product.skus[product.sku_id]) {
                        product.skus[product.sku_id].checked = true;
                    }

                    if ($('#order-currency').length && !$('#order-currency').attr('disabled')) {
                        $('<input type="hidden" name="currency">').val($('#order-currency').val()).insertAfter($('#order-currency'));
                        $('#order-currency').attr('disabled', 'disabled');
                    }

                    var add_row = $('#s-orders-add-row');
                    add_row.before(tmpl('template-order', {
                        data: r.data, options: {
                            index: index,
                            currency: $.order_edit.options.currency,
                            stocks: $.order_edit.stocks,
                            price_edit: price_edit
                        }
                    }));
                    var item = add_row.prev();
                    var active_sku = product.skus[product.sku_id];

                    $.order_edit.initQuantity({
                        $wrapper: item.find("#js-quantity-section").removeAttr("id"),
                        denominator: product["order_multiplicity_factor"],
                        step: (active_sku.order_count_step || product.order_count_step),
                        min: (active_sku.order_count_min || product.order_count_min),
                        max: active_sku.count
                    });

                    $('#s-order-comment-edit').show();
                    $.order_edit.updateTotal();

                    updateStockIcon(item);

                });
                add_order_input.val('');

                return false;
            }
        });

        // Select product SKU
        this.container.off('change', '.s-orders-skus input[type=radio]').on('change', '.s-orders-skus input[type=radio]',
            function () {
                var self = $(this);
                var tr = self.parents('tr:first');
                var li = self.closest('li');
                var sku_id = this.value;
                var product_id = tr.attr('data-product-id');
                var index = tr.attr('data-index');
                var mode = $.order_edit.id ? 'edit' : 'add';
                var item_id = null;
                if (mode == 'edit') {
                    item_id = parseInt(self.attr('name').replace('sku[edit][', ''), 10);
                }

                var url = '?module=orders&action=getProduct&product_id=' + product_id + '&sku_id=' + sku_id + '&currency=' + $.order_edit.options.currency,
                    storefront = that.getStorefront();
                if (storefront) {
                    url += '&storefront=' + storefront;
                }

                $.getJSON(url, function (r) {
                    var ns;
                    if (tr.find('input:first').attr('name').indexOf('add') !== -1) {
                        ns = 'add';
                    } else {
                        ns = 'edit';
                    }

                    tr.find('.s-orders-services').replaceWith(
                        tmpl('template-order-services-' + ns, {
                            services: r.data.sku.services,
                            service_ids: r.data.service_ids,
                            product_id: product_id,
                            options: {
                                price_edit: price_edit,
                                index: index,
                                currency: $.order_edit.options.currency,
                                stocks: $.order_edit.stocks
                            }
                        })
                    );
                    tr.find('.s-orders-product-price').find('input').val(r.data.sku.price);

                    tr.find('.s-orders-sku-stock-place').empty();
                    li.find('.s-orders-sku-stock-place').html(
                        tmpl('template-order-stocks-' + ns, {
                            sku: r.data.sku,
                            index: index,
                            stocks: $.order_edit.stocks,
                            item_id: item_id   // use only for edit namespace
                        })
                    );

                    var $min = tr.find(".js-order_count_min");
                    if ($min.length) {
                        var sku = r.data.sku;

                        var $val = $min.find(".js-value");
                        var value = (r.data.sku.order_count_min ? parseFloat(r.data.sku.order_count_min) : parseFloat(r.data.product.order_count_min));
                        $val.text(value);

                        var max = parseFloat(sku.count);

                        var $stock_select = tr.find(".s-orders-sku-stock-select");
                        if ($stock_select.length) {
                            if (sku.stock) {
                                var stock_id = $stock_select.val();
                                if (stock_id && sku.stock[stock_id]) {
                                    max = parseFloat(sku.stock[stock_id]);

                                }
                                $stock_select.data("stock", sku.stock);
                            }
                        }

                        var controller = tr.find(".js-quantity-field").data("controller");
                        controller.update({
                            min: (sku.order_count_min ? parseFloat(sku.order_count_min) : parseFloat(r.data.product.order_count_min)),
                            max: max
                        });

                        console.log( controller );
                    }

                    updateStockIcon(tr);
                    $.order_edit.updateTotal();

                });
            }
        );

        // change stocks select
        this.container.off('change', '.s-orders-sku-stock-select').on('change', '.s-orders-sku-stock-select', function () {
            var tr = $(this).parents('tr.s-order-item:first');
            var $stock_select = tr.find(".s-orders-sku-stock-select");
            if ($stock_select.length) {
                var stock_id = $stock_select.val();
                var stocks = $stock_select.data("stock");
                if (stock_id && stocks && stocks[stock_id]) {
                    var controller = tr.find(".js-quantity-field").data("controller");
                    controller.update({
                        max: parseFloat(stocks[stock_id])
                    });
                    console.log( controller );
                }
            }

            updateStockIcon(tr);
        });

        var updateServicePriceInput = function (variant_option, service_input, update_val) {
            var price = variant_option.attr('data-price');
            var percent_price = variant_option.attr('data-percent-price');
            if (update_val) {
                service_input.val(price);
            }
            service_input.attr('data-price', price);
            service_input.attr('data-percent-price', percent_price);
        };
        this.container.off('change', '.s-orders-service-variant').on('change', '.s-orders-service-variant', function () {
            var self = $(this);
            var option = self.find('option:selected');
            var li = self.parents('li:first');
            updateServicePriceInput(option, li.find('.s-orders-service-price'), true);
        });
        this.container.find('.s-orders-service-variant').each(function () {
            var item = $(this);
            var option = item.find('option:selected');
            var li = item.parents('li:first');
            updateServicePriceInput(option, li.find('.s-orders-service-price'), false);
        });

        this.container.off('click', '.s-order-item-delete').on('click', '.s-order-item-delete', function () {
            var self = $(this);
            self.parents('tr:first').remove();

            if (!$('table#order-items').find('tr.s-order-item:first').length) {
                $('#s-order-comment-edit').hide();
            }

            $.order_edit.updateTotal();
            return false;
        });

        // calculations
        this.container.off('change', '.s-orders-services input').on('change', '.s-orders-services input', $.order_edit.updateTotal);
        this.container.off('change', '.s-orders-product-price input').on('change', '.s-orders-product-price input', function () {
            var $this = $(this),
                $scope = $this.parents('tr:first');
            $.order_edit.updateServicePriceInPercent($scope);
            $.order_edit.updateTotal();
        });
        this.container.off('change', '.s-orders-services .s-orders-service-variant').on('change', '.s-orders-services .s-orders-service-variant',
            $.order_edit.updateTotal
        );

        $("#payment_methods").change(function () {
            var pid = $(this).val();
            $("#payment-info > div").hide();
            $.order_edit.updateTotal();

            // if ($('#payment-custom-' + pid).length) {
            //     $('#payment-custom-' + pid).show();
            // }
        });


        this.container.off('keydown', '.s-orders-quantity').on('keydown', '.s-orders-quantity', function () {
            var self = $(this);
            var timer_id = self.data('timer_id');
            if (timer_id) {
                clearTimeout(timer_id);
            }
            self.data('timer_id', setTimeout(function () {
                $.order_edit.updateTotal();
            }, 450));
        });

        if (this.form && this.form.length) {

            var orderSaveSubmit = function () {

                var form = $(this);
                if (orderSaveSubmit.xhr) {
                    return false;
                }
                $.order_edit.showValidateErrors();

                // submit optimization
                // disable that services that aren't checked
                var selector = '.s-orders-services input[name^="service"][type="checkbox"]:not(:checked)'
                    + ',' + '.s-orders-services input.js-fake-service-selected[type="checkbox"]:not(:checked)';
                $(selector, this.form).each(function () {
                    var item = $(this);
                    item.closest('li').find(':input').attr('disabled', true);
                });

                if (!$.order_edit.container.find('.error').length) {

                    //Disable submit button
                    $.order_edit.switchSubmitButton('disable');

                    var onAlwaysSubmit = function () {
                        orderSaveSubmit.xhr = null;
                        //Allow submit button
                        $.order_edit.switchSubmitButton();
                        $('.s-orders-services input:disabled', form).attr('disabled', false);
                    };
                    if ($.order_edit.id) {
                        orderSaveSubmit.xhr = $.order_edit.saveSubmit(onAlwaysSubmit, 'edit');
                    } else {
                        orderSaveSubmit.xhr = $.order_edit.saveSubmit(onAlwaysSubmit, 'add');
                    }
                }
                return false;
            };

            this.form.unbind('sumbit').bind('submit', orderSaveSubmit);
        }

        //Formatting values from a database
        $("#subtotal").text(this.roundFloat($("#subtotal").text()));
        $("#total").text(this.roundFloat($("#total").text()));
        $('#discount').val(this.roundFloat($('#discount').val()));
        $('#tax').text(this.roundFloat($('#tax').text()));

        /**
         * @event order_edit_init_view
         */
        this.container.trigger('order_edit_init_view');
    },

    initShippingControl: function () {
        var that = this;
        that.prev_ship_method = $("#shipping_methods").val();

        $("#shipping-custom").on('change', ':input', function (e) {
            /**
             * handle only related changes
             */
            $.shop.trace('#shipping-custom change', [e, this]);
            if (e.originalEvent && $(this).data('affects-rate')) {
                $.order_edit.updateTotal();
            }
        });

        //First load set info.
        that.setShippingInfo();

        $("#shipping_methods").change(function () {
            var option = $("#shipping_methods option:selected"),
                rate = option.data('rate') || 0,
                $shipping_rate = $('#shipping-rate');

            // Update cost if it is not entered by hand
            if (!$shipping_rate.data('shipping') || option.val() != that.prev_ship_method) {
                $shipping_rate.val($.order_edit.formatFloat(rate));
                $shipping_rate.data('shipping', false);
                that.prev_ship_method = option.val();
            }

            that.setShippingInfo();
            $.order_edit.updateTotal();
        });

        //Prevent shipping cost updates
        $('#shipping-rate').change(function () {
            var $self = $(this);
            if ($self.val() < 0) {
                alert($.order_edit.locales.wrong_cost);
                $self.val(0);
                return false;
            }
            $('#shipping-rate').data('shipping', $(this).val());
            $.order_edit.updateTotal();
        });

        /**
         * @event order_edit_init_shipping
         */
        this.container.trigger('order_edit_init_shipping');
    },

    initDiscountControl: function () {
        var $discount_input = $('#discount');
        var $discount_description_input = $('#discount-description');
        var $update_discount_button = $('#update-discount');
        var $edit_discount_button = $('#edit-discount');
        var $tooltip_icon = $('#discount-tooltip-icon');

        // Tooltip to show how discounts were calculated
        $tooltip_icon.tooltip({
            showURL: false,
            bodyHandler: function () {
                return $discount_description_input.val() || $discount_description_input.data('updated-manually-msg');
            }
        });

        $update_discount_button.tooltip({
            showURL: false,
            bodyHandler: function () {
                return $update_discount_button.data('description') || $discount_description_input.data('updated-manually-msg');
            }
        });

        if ($edit_discount_button.length) {
            $tooltip_icon.show();
        } else {
            // Nothing to show yet
            $tooltip_icon.hide();
        }

        // When we get recalculated discount, update the fields accordingly
        $('#order-edit-form').on('order_total_updated', function (e, data) {
            $discount_input.show();
            $discount_input.parent().find('span.js-order-discount:first').hide();
            $edit_discount_button.hide();

            //Set Advanced information about discount
            $update_discount_button.data('description', data.discount_description);

            if (!data.discount) {
                return;
            }

            // Remember recalculated discount value and description
            $update_discount_button
                .data('value', data.discount)
                .data('description', data.discount_description)
                .data('items_discount', data.items_discount)
            ;

            //Update old discount
            if ($update_discount_button.data('discount') === 'calculate') {
                $discount_description_input.val($update_discount_button.data('description'));

                //Set or update discount html in all order position
                var items_discount = $update_discount_button.data('items_discount') || [];
                for (var index = 0; index < items_discount.length; index++) {
                    if (items_discount[index]) {
                        var selector = '#order-items span.js-item-total-discount';
                        selector += '[data-discount-id="' + items_discount[index]['selector'] + '"]';
                        var $discount = $(selector);
                        if ($discount.length) {
                            $discount.html(items_discount[index]['html']).show();
                        }
                    }
                }

                updateTooltip();
            }

            if ($update_discount_button.data('discount') === 'calculate') {
                // When value in discount input matches previous recalculation,
                // but new recalculated discount is different,
                // update visible fields immediately
                if ($.order_edit.parseFloat(data.discount) !== $.order_edit.parseFloat($discount_input.val())) {
                    $update_discount_button.click();
                }
            } else {
                // Otherwise, make user decide whether they want to recalculate the discount
                $update_discount_button.show();
            }
        });

        var hide_manual_edit = function () {
            $discount_input.show();
            $discount_input.parent().find('span.js-order-discount:first').hide();
            $edit_discount_button.hide();

            $('.js-item-total-discount').hide();
        };

        $edit_discount_button.click(function () {
            hide_manual_edit();

            $discount_description_input.val('');
            return false;
        });

        // When user clicks the update button, put discount value and description to fields
        // and hide the button itself
        $update_discount_button.click(function () {
            hide_manual_edit();

            $discount_input.val($update_discount_button.data('value') || 0).change();
            $discount_description_input.val($update_discount_button.data('description'));

            $discount_input.attr('title', $discount_description_input.data('edit-manually-msg'));

            $update_discount_button.hide().data('discount', 'calculate');
            $.order_edit.updateTotal();
            updateTooltip();
            return false;
        });

        // When user updates the discount field by hand, show the button to reset to calculated values
        $discount_input.on('change', function () {
            $edit_discount_button.click();
            $discount_description_input.val('');
            $('#order-items .js-item-total-discount').hide();
            $discount_input.attr('title', null);

            //Set discount value
            $update_discount_button.show().data('discount', $(this).val());

            $.order_edit.updateTotal();

            updateTooltip();
        });

        /**
         * Show/hide and animation discount calculate button
         */
        function updateTooltip() {
            if ($.order_edit.parseFloat($discount_input.val()) > 0) {
                $tooltip_icon.stop().show();
            } else {
                $tooltip_icon.stop().hide();
            }

            //Animation
            var duration = 25;
            var delta = 50;
            if ($tooltip_icon.is(':visible')) {
                $tooltip_icon.finish()
                    .fadeOut(duration += delta)
                    .fadeIn(duration += delta)
                    .fadeOut(duration += delta)
                    .fadeIn(duration += delta)
                    .fadeOut(duration += delta)
                    .fadeIn(duration += delta)
                    .fadeOut(duration += delta)
                    .fadeIn(duration += delta); // sorry doge
            }
        }

        /**
         * @event order_edit_init_discount
         */
        this.container.trigger('order_edit_init_discount');
    },

    initCouponControl: function () {
        var $coupon_id = $('#coupon_id'),
            $coupon_code = $('#coupon-code'),
            $coupon_code_label = $('.coupon-code-label'),
            $js_no_coupon_text = $('.js-no-coupon-text'),
            $js_coupon_icon = $('.js-coupon-icon'),
            $js_edit_coupon = $('.js-edit-coupon'),
            $js_close_coupon = $('.js-close-coupon'),
            $js_delete_coupon = $('.js-delete-coupon'),
            $update_discount_button = $('#update-discount'),
            $js_coupon_invalid_msg = $('#js-coupon-invalid-msg');

        $js_edit_coupon.click(function() {
            $(this).add($js_no_coupon_text).add($js_coupon_icon).add($coupon_code_label).hide();
            $coupon_code.data('value', $coupon_code.val());
            $coupon_code.val('').show();
            $js_close_coupon.show();
        });

        $js_close_coupon.click(function () {
            $coupon_code.val($coupon_code.data('value'));
            $js_edit_coupon.show();
            if ($coupon_id.val() === "") {
                $js_no_coupon_text.show();
            } else {
                $js_coupon_icon.add($coupon_code_label).show();
            }
            $(this).add($coupon_code).add($js_coupon_invalid_msg).hide();
        });

        $js_delete_coupon.click(function () {
            $(this).add($coupon_code).add($js_coupon_icon).add($coupon_code_label).add($js_edit_coupon).add($js_close_coupon).add($js_coupon_invalid_msg).hide();
            $coupon_id.val('');
            $update_discount_button.click();
            $js_no_coupon_text.add($js_edit_coupon).show();
        });

        $('.disabled-link').click(function(e) {
           e.preventDefault();
        });

        $coupon_code.autocomplete({
            source: function (request, response) {
                $.ajax({
                    type: "POST",
                    url: '?module=marketing&action=CouponsAutocomplete',
                    data: {
                        term: $coupon_code.val(),
                        products: $('input[name^="product["]').serializeArray()
                    },
                    success: function (data) {
                        response(data);
                        if (!data.length) {
                            showCouponInvalidMessage();
                        } else {
                            $js_coupon_invalid_msg.hide();
                        }
                    },
                    error: function () {
                        response([]);
                    }
                });
            },
            minLength: 1,
            delay: 300,
            select: function (event, ui) {
                if (ui.item.data.valid) {
                    $coupon_code.val(ui.item.label).hide();
                    $coupon_id.val(ui.item.value);
                    $coupon_code_label.html(ui.item.label).show();
                    $js_edit_coupon.add($js_coupon_icon).add($js_delete_coupon).show();
                    if (ui.item.data.right) {
                        $('.s-order-edit-coupon').attr('href', $('.s-order-edit-coupon').data('href') + ui.item.value);
                        if (ui.item.value.length != 0) {
                            $update_discount_button.click();
                            $('.s-order-edit-coupon').removeClass('disabled-link');
                        }
                    } else if (ui.item.value.length != 0) {
                        $update_discount_button.click();
                    }
                    $js_close_coupon.hide();
                } else {
                    $coupon_code.val(ui.item.label);
                    showCouponInvalidMessage();
                }
                return false;
            }
        });

        function showCouponInvalidMessage() {
            $js_coupon_invalid_msg.show();
            $js_coupon_invalid_msg.css('padding-right', $('.coupon-controls').width() + 4 + 'px');
        }
    },

    initCustomerSourceControl: function (customer_sources) {
        var $input = $('#customer-source');
        $input.autocomplete({
            delay: 0,
            minLength: 0,
            appendTo: '#order-edit-form',
            source: function (request, response) {
                var result = customer_sources.filter(function (v) {
                    return v && v.indexOf && v.indexOf(request.term) >= 0;
                }).slice(0, 10);
                if (result.length == 1 && result[0] == request.term) {
                    response([]);
                } else {
                    response(result);
                }
            }
        }).on('focus', function () {
            $input.autocomplete('search');
        });
    },

    /**
     * Enumerates all the product and tries to update the services as a percentage.
     */
    initUpdateServicePrice: function () {
        var items = this.container.find('.s-order-item');
        items.each(function () {
            $.order_edit.updateServicePriceInPercent($(this));
        })
    },

    initQuantity: function(options) {

        function validate(type, value) {
            value = (typeof value === "string" ? value : "" + value);

            var result = value;

            switch (type) {
                case "float":
                    var float_value = parseFloat(value);
                    if (float_value >= 0) {
                        result = float_value.toFixed(3) * 1;
                    }
                    break;

                case "number":
                    var white_list = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", ","],
                        letters_array = [],
                        divider_exist = false;

                    $.each(value.split(""), function(i, letter) {
                        if (letter === "." || letter === ",") {
                            letter = ".";
                            if (!divider_exist) {
                                divider_exist = true;
                                letters_array.push(letter);
                            }
                        } else {
                            if (white_list.indexOf(letter) >= 0) {
                                letters_array.push(letter);
                            }
                        }
                    });

                    result = letters_array.join("");
                    break;

                case "integer":
                    var white_list = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"],
                        letters_array = [];

                    $.each(value.split(""), function(i, letter) {
                        if (white_list.indexOf(letter) >= 0) {
                            letters_array.push(letter);
                        }
                    });

                    result = letters_array.join("");
                    break;

                default:
                    break;
            }

            return result;
        }

        var Quantity = ( function($) {

            Quantity = function(options) {
                var that = this;

                // DOM
                that.$wrapper = options["$wrapper"];
                that.$field = that.$wrapper.find(".js-quantity-field");

                // CONST
                that.denominator = (typeof options["denominator"] !== "undefined" ? validate("float", options["denominator"]) : 1);
                that.denominator = (that.denominator > 0 ? that.denominator : 1);
                that.min = (typeof options["min"] !== "undefined" ? validate("float", options["min"]) : that.denominator);
                that.min = (that.min > 0 ? that.min : 1);
                that.max = (typeof options["max"] !== "undefined" ? validate("float", options["max"]) : 0);
                that.max = (that.max >= 0 ? that.max : 0);
                that.step = (typeof options["step"] !== "undefined" ? validate("float", options["step"]) : 1);
                that.step = (that.step > 0 ? that.step : 1);

                // DYNAMIC VARS
                that.value = getValue();

                // INIT
                that.init();

                console.log( that );

                function getValue() {
                    var value = that.$field.val();

                    if (parseFloat(value) > 0) {
                        //
                    } else {
                        that.$field.val(that.min);
                        value = that.min;
                    }

                    return that.validate(value);
                }
            };

            Quantity.prototype.init = function() {
                var that = this;

                that.$field.data("controller", that);
                that.$wrapper.data("controller", that);

                that.$field.on("input", function() {
                    var value = that.$field.val(),
                        new_value = (typeof value === "string" ? value : "" + value);

                    new_value = validateNumber(new_value);
                    if (new_value !== value) {
                        that.$field.val(new_value);
                    }
                });

                that.$field.on("change", function() {
                    that.set(that.$field.val());
                });

                //

                function validateNumber(value) {
                    var white_list = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "."],
                        letters_array = [],
                        divider_exist = false;

                    value = value.replace(/,/g, ".");

                    $.each(value.split(""), function(i, letter) {
                        if (letter === ".") {
                            if (!divider_exist) {
                                divider_exist = true;
                                letters_array.push(letter);
                            }
                        } else {
                            if (white_list.indexOf(letter) >= 0) {
                                letters_array.push(letter);
                            }
                        }
                    });

                    return letters_array.join("");
                }
            };

            /**
             * @param {string|number} value
             * @param {object?} options
             * */
            Quantity.prototype.set = function(value, options) {
                options = (typeof options !== "undefined" ? options : {});

                var that = this;

                value = that.validate(value);
                that.$field.val(value);
                that.value = value;

                that.$wrapper.trigger("quantity.changed", [that.value, that]);
            };

            Quantity.prototype.validate = function(value) {
                var that = this,
                    result = value;

                value = (typeof value !== "number" ? parseFloat(value) : value);
                value = parseFloat(value.toFixed(3));

                if (value > 0) {
                    // Ð»ÐµÐ²Ð°Ñ Ð³ÑÐ°Ð½Ð¸ÑÐ°
                    if (value < that.min) { value = that.min; }
                    // Ð¿ÑÐ°Ð²Ð°Ñ Ð³ÑÐ°Ð½Ð¸ÑÐ°
                    else if (that.max && (that.max > that.min) && (value > that.max)) {
                        value = that.max;
                    }
                    // ÑÐµÐ½ÑÑ
                    else {
                        var steps_count = Math.floor(value/that.denominator);
                        var x1 = (that.denominator * steps_count).toFixed(3) * 1;
                        if (x1 !== value) {
                            value = that.denominator * (steps_count + 1);
                        }
                    }
                } else {
                    value = that.min;
                }

                return validate("float", value);
            };

            Quantity.prototype.update = function(options) {
                var that = this;

                var min = (typeof options["min"] !== "undefined" ? validate("float", options["min"]) : that.min),
                    max = (typeof options["max"] !== "undefined" ? (parseFloat(options["max"]) >= 0 ? validate("float", options["max"]) : 0) : that.max),
                    step = (typeof options["step"] !== "undefined" ? validate("float", options["step"]) : that.step),
                    value = (typeof options["value"] !== "undefined" ? that.validate(options["value"]) : that.value);

                if (min > 0 && min !== that.min) { that.min = min; }
                if (max >= 0 && max !== that.max) { that.max = max; }
                if (step > 0 && step !== that.step) { that.step = step; }
                if (value > 0 && value !== that.value) { that.value = value; }

                that.set(that.value);
            };

            return Quantity;

        })($);

        return new Quantity(options);
    },

    /**
     * Updates services as a percentage
     * @param $product_row
     * @returns {null}
     */
    updateServicePriceInPercent: function ($product_row) {
        var price = $product_row.find('.js-order-edit-item-price').val();

        if (typeof price === "undefined") {
            return null;
        }

        $product_row.find('[data-currency="%"]').each(function () {
            var service = $(this),
                p = price * (service.data('percentPrice') / 100),
                p = $.order_edit.roundFloat(p);
            service.val($.order_edit.formatFloat(p));
            service.attr('data-price', p);
        });
    },

    setShippingInfo: function () {
        var $methods = $("#shipping_methods"),
            $option = $methods.children(':selected'),
            $shipping_input = $('#shipping-rate'),
            $shipping_info = $('#shipping-info'),
            sid = $methods.val(),
            prev_sid = $methods.data('_shipping_id'),
            address_has_picked = $.order_edit.checkSelectedAddressFields();

        var delivery_info = [];

        if ($option.length) {
            if ($option.data('error') && !address_has_picked) {
                delivery_info.push('<span class="error">' + $option.data('error') + '</span>');
            }
            if ($option.data('est_delivery')) {
                delivery_info.push('<span class="hint est_delivery">' + $option.data('est_delivery') + '</span>');
            }

            $("#shipping-custom > div").hide();

            if (sid !== null) {
                sid = ('' + sid).replace(/\..+$/, '');
                if ($('#shipping-custom-' + sid).length) {
                    $('#shipping-custom-' + sid).show();
                }
            }

            if ($option.data('comment')) {
                delivery_info.push('<span class="hint">' + $option.data('comment') + '</span>');
            }

            if (delivery_info) {
                if ($option.data('error') && !address_has_picked) {
                    $shipping_input.addClass('error');
                    $methods.addClass('error');
                } else {
                    $shipping_input.removeClass('error');
                    $methods.removeClass('error');
                }
                $shipping_info.html(delivery_info.join('<br>')).show();
            } else {
                $shipping_input.removeClass('error');
                $shipping_info.empty().hide();
            }
        } else {
            $methods.addClass('error');
        }

        $.shop.trace('check shipping_methods id', [prev_sid, sid, $option]);
    },

    checkSelectedAddressFields: function () {
        var $shipping_city = $('[name="customer[address.shipping][city]"]'),
            $shipping_region = $('[name="customer[address.shipping][region]"]'),
            address_fields = [{
                'exists': $shipping_city.length > 0,
                'selected': $shipping_city.val() != ""
            }, {
                'exists': $shipping_region.length > 0,
                'selected': $shipping_region.val() != ""
            }];

        var count_exists_address_fields = 0,
            count_selected_address_fields = 0;
        for (var key in address_fields) {
            var address_field = address_fields[key];
            if (address_field.exists) {
                count_exists_address_fields++;
            }
            if (address_field.exists && address_field.selected) {
                count_selected_address_fields++;
            }
        }

        return count_exists_address_fields == count_selected_address_fields;
    },

    getOrderItems: function (container) {
        var items = [];

        var order_content = [];

        container.find('.s-order-item').each(function () {
            var tr = $(this),
                product_id = tr.find('input[name^="product"]').val(),
                services = [],
                price = $.order_edit.parseFloat(tr.find('.s-orders-product-price input').val()),
                quantity = $.order_edit.parseFloat(tr.find('input.s-orders-quantity').val()),
                stock_id = tr.find('select.s-orders-sku-stock-select').val(),
                item_id = tr.data('item-id');

            // get SKU id
            var sku_input = tr.find('input[name^=sku]:not(:radio)').add(tr.find('input[name^=sku]:checked')).first();
            var sku_id = sku_input.val() || 0;

            var order_item = {
                "product_id": product_id,
                "sku_id": sku_id,
                "services": []
            };

            if (tr.find('.s-orders-services').length) {
                tr.find('.s-orders-services input:checkbox:checked').each(function () {
                    var li = $(this).closest('li');
                    var service_price = $.order_edit.parseFloat(li.find('input.s-orders-service-price').val());
                    var service_id = $(this).val();
                    var service_variant_id = li.find(':input[name^="variant\["]').val();

                    services.push({
                        "id": service_id,
                        "price": service_price,
                        "variant_id": service_variant_id
                    });

                    order_item.services.push(service_id);
                });
            }
            order_item.services.sort();
            order_item.services = order_item.services.join('_');

            items.push({
                id: item_id,
                product_id: product_id,
                quantity: quantity,
                price: price,
                sku_id: sku_id,
                services: services,
                stock_id: stock_id
            });

            order_content.push(order_item);
        });

        order_content = this.reduceOrderContent(order_content);
        container.data('order-content', order_content);

        return items;
    },

    /**
     * @param {Object[]} order_content
     * @returns {String}
     */
    reduceOrderContent: function (order_content) {
        order_content.sort(function (a, b) {
            var delta = a.product_id - b.product_id;
            if (delta === 0) {
                delta = a.sku_id - b.sku_id;
            }
            if (delta === 0) {
                delta = a.services.localeCompare(b.services);
            }
            return delta;
        });

        return order_content.map(function (order_item) {
            return '*' + order_item.product_id + ':' + order_item.sku_id + ':' + order_item.services;
        }).join(';');
    },

    /**
     * Collects frequent calls updateTotal
     */
    updateTotal: (function () {
        var timeout = null;
        return updateTotal;

        function updateTotal() {
            if (timeout) {
                clearTimeout(timeout);
                timeout = setTimeout(realUpdateTotal, 250);
            } else {
                timeout = setTimeout(realUpdateTotal, 500);
            }
        }

        function realUpdateTotal() {
            timeout = null;
            $.order_edit.realUpdateTotal();
        }
    })(),

    realUpdateTotal: function () {
        var container = $.order_edit.container,
            $subtotal = $("#subtotal"),
            $total = $("#total"),
            $tax = $("#tax");
        if (!container.find('.s-order-item').length) {
            $subtotal.text(0);
            $total.text(0);
            var address_has_picked = $.order_edit.checkSelectedAddressFields();
            if (address_has_picked) {
                $("#shipping_methods, #shipping-rate").removeClass('error');
                $("#shipping-info").empty().hide();
            }
            return;
        }
        var that = this;

        //Disable submit button
        $.order_edit.switchSubmitButton('disable');

        //clear errors.
        $.order_edit.showValidateErrors();

        // Data for orderTotal controller
        var data = {};

        // Customer data to recalculate shipping
        var customer = $("#s-order-edit-customer").find('[name^="customer["]').serializeArray();
        for (var i = 0; i < customer.length; i++) {
            data[customer[i].name] = customer[i].value;
        }

        // For customer form need also storefront, cause functionality of form depends of storefront also
        data['storefront'] = that.getStorefront();

        data.items = $.order_edit.getOrderItems(container);

        //see discount property in shopOrder
        var update_discount = $('#update-discount').data('discount');
        if (update_discount !== undefined) {
            if (update_discount !== 'calculate') {
                update_discount = $.order_edit.parseFloat(update_discount);
            }
            data.discount = update_discount;
        }

        if ($.order_edit.id) {
            data.order_id = $.order_edit.id;
        } else {
            data['currency'] = $('#order-edit-form input[name=currency]').val();
        }

        var shipping_id = $('#shipping_methods').val(),
            payment_id = $('#payment_methods').val(),
            coupon_id = $('#coupon_id').val();

        //Send the cost of delivery of entered by hands
        if ($('#shipping-rate').data('shipping')) {
            data.shipping = $('#shipping-rate').data('shipping');
        }

        data['params'] = {shipping_id: shipping_id, coupon_id: coupon_id, payment_id: payment_id};
        data['customer[id]'] = data['contact_id'] = $('#s-customer-id').val();
        data.tax = 'calculate';

        if (shipping_id) {
            shipping_id = parseInt(shipping_id.split('.')[0]);
            if (shipping_id > 0) {
                //Retrieve shipping parameters
                $('#shipping-custom').find('>#shipping-custom-' + shipping_id + ' :input').each(function () {
                    data[this.name] = this.value;
                });
            }
        }
        // Fetch shipping options and rates, and other info from orderTotal controller
        $.ajax({
            "type": 'POST',
            "url": '?module=order&action=total',
            "data": data,
            "success": function (response) {
                if (response && response.status === 'ok') {
                    var $shipping_rate = $('#shipping-rate'),
                        el = $("#shipping_methods"),
                        el_selected = $.trim(el.val()) || '',
                        el_selected_id = el_selected.replace(/\W.+$/, '');

                    if (response.data) {
                        response.data = $.order_edit.parseTotalResponse(response.data);
                    }

                    //clear shipping data.
                    el.empty();
                    el.prepend('<option value=""></option>');

                    if (response.data.shipping_method_ids.length > 0) {
                        var custom_html_container = $('#shipping-custom');
                        custom_html_container.empty();

                        var shipping_method_ids = response.data.shipping_method_ids;
                        var shipping_methods = response.data.shipping_methods;

                        // exact match
                        var found = false,
                            problem_shipping = false;

                        if (shipping_method_ids.indexOf(el_selected) !== -1) {
                            found = true;
                        }

                        //If the delivery is not available, it will return and will contain an error.
                        //Available only on id plugin
                        if (!found && shipping_method_ids.indexOf(Number(el_selected_id)) !== -1) {
                            found = true;
                            problem_shipping = true;
                        }

                        custom_html_container.find('>div.fields.form').hide();

                        for (var i = 0; i < shipping_method_ids.length; i += 1) {
                            var ship_id = '' + shipping_method_ids[i],
                                ship = shipping_methods[ship_id],
                                plugin_id = ship_id.replace(/\W.+$/, ''),
                                o = $('<option></option>');

                            o.html(ship.name).attr('value', ship_id).data('rate', ship.rate);
                            o.data('error', ship.error || undefined);
                            o.data('est_delivery', ship.est_delivery || undefined);
                            o.data('comment', ship.comment || undefined);
                            o.data('external', ship.external || false);

                            el.append(o);

                            //If shipping not selected, select first
                            if (!el_selected && i === 0) {
                                $("#shipping-rate").val($.order_edit.formatFloat(ship.rate));
                            }

                            //Custom fields same for all positions of one plug-in
                            //They are stored only in the last rates Â¯\_(ã)_/Â¯
                            if (el_selected_id == plugin_id) {
                                if (ship.custom_data) {
                                    for (var custom_field in ship.custom_data) {
                                        if (ship.custom_data.hasOwnProperty(custom_field)) {
                                            o.data(custom_field, ship.custom_data[custom_field]);
                                        }
                                    }
                                }

                                if (ship.custom_html) {
                                    var custom_html = custom_html_container.find('#shipping-custom-' + plugin_id);
                                    if (!custom_html.length) {
                                        custom_html = custom_html_container.append('<div id="shipping-custom-' + plugin_id + '" class="fields form"></div>');
                                        custom_html = custom_html_container.find('#shipping-custom-' + plugin_id);
                                    }
                                    custom_html.html(ship.custom_html);
                                }
                            }

                            //If the selected id is not in the server's response, then find the delivery that starts with the same id, select its value and recount
                            if (!found) {
                                var ship_id_parts = ('' + ship_id).split('.');
                                var el_selected_parts = el_selected.split('.');

                                //if user did not choose delivery, no need to change anything. Or user turn off delivery
                                if (el_selected_parts[0] !== '') {
                                    //Search delivery by ID. If found - select first delivery option, and recalculate delivery value.
                                    if (ship_id_parts[0] !== undefined && el_selected_parts[0] !== undefined &&
                                        ship_id_parts[0] == el_selected_parts[0]) {
                                        el_selected = ship_id;
                                        el.val(el_selected);
                                        $.order_edit.setShippingInfo();
                                        $.order_edit.realUpdateTotal();
                                        return;
                                    }
                                }
                            }
                        }

                        el.val(el_selected);

                        //If there is a problematic delivery, choose it.
                        if (problem_shipping) {
                            el.val(el_selected_id)
                        }

                        el.data('_shipping_id', el_selected_id);
                        $.shop.trace('set shipping_methods id', [el_selected_id, el_selected]);
                    }

                    renderPayments(response.data.payment_methods);

                    //If user deleted discount value, don't need set zero discount value
                    if (update_discount != '') {
                        $('#discount').val(response.data.discount);
                    }

                    //Update shipping rate.
                    $shipping_rate.val(response.data.shipping);

                    $('#order-edit-form').trigger('order_total_updated', response.data);

                    //Update order value after calculate.
                    $subtotal.text(response.data.subtotal);
                    $total.text(response.data.total);
                    $tax.text(response.data.tax);

                    $.order_edit.showValidateErrors(response.data.errors);
                    that.setShippingInfo();

                    //Allow submit button
                    $.order_edit.switchSubmitButton();
                } else {
                    //Allow submit button
                    $.order_edit.switchSubmitButton();
                }

                function renderPayments(methods) {
                    var $payment_methods = $("#payment_methods"),
                        $payment_custom = $("#payment-info");

                    var selected_payment_method = $payment_methods.val();

                    // clear payment data
                    $payment_methods.html("");
                    $payment_custom.html("");

                    $payment_methods.append("<option value=''></option>");
                    $payment_methods.val("");

                    if (methods.length) {
                        $.each(methods, function(i, method) {
                            // option
                            var method_html = '<option value="'+method.id+'">'+method.name+'</option>';
                            $payment_methods.append(method_html);
                            // custom html
                            if (method.id === selected_payment_method) {
                                $payment_methods.val(selected_payment_method);
                                if (method.custom_html) {
                                    var $custom = $("<div />", { id: "payment-custom-" + method.id, class: "fields form" }).html(method.custom_html);
                                    $custom.appendTo($payment_custom);
                                }
                            }
                        });
                    }
                }
            },
            "dataType": 'json'
        });
    },

    /**
     * If type == edit, show main orders page.
     * If type == add, show new order for main page.
     * @param always
     * @param type {add|edit}
     * @returns {*|void}
     */
    saveSubmit: function (always, type) {
        var form = this.form,
            data = form.serializeArray();

        //Recalculate discount in server
        if ($('#update-discount').data('discount') === 'calculate') {
            $(data).each(function () {
                if (this.name == 'discount') {
                    this.value = 'calculate';
                }
            });
        } else if ($('#update-discount').data('discount') === undefined) {

            //If discount not changed, not need send discount value, but need send discount_description.
            data = data.filter(function (el) {
                return el.name !== 'discount';
            });

            //If discount previously did not install, need send discount_description.
            if ($('#discount').val() > 0) {
                //Discount Description contains info about old discounts
                data.discount_description = $('#edit-discount').val();
            } else {
                data = data.filter(function (el) {
                    return el.name !== 'discount_description';
                });
            }
        }

        if (type == 'add') {
            success = function (r) {
                $.order_edit.container.trigger('order_edit_save_success', {
                    data: r.data,
                    is_new: true
                });
                if (!$.order_edit.options.embedded_version && $.order_edit.slide(false, true)) {
                    location.href = '#/orders/state_id=new&view=split&id=' + r.data.order.id + '/';
                }
            };
        } else {
            success = function (r) {
                $.order_edit.container.trigger('order_edit_save_success', {
                    data: r.data,
                    is_new: false
                });
                if (!$.order_edit.options.embedded_version) {
                    $.order_edit.container.find('.back').click();
                }
            };
        }

        //$.shop.trace(type, form.serialize());

        /**
         * @event order_edit_save
         */
        this.container.trigger('order_edit_save', data);

        return $.shop.jsonPost(
            form.attr('action'),
            data,
            success,
            function (r) {
                $.shop.trace(type, r);
                if (r && r.errors && !$.isEmptyObject(r.errors)) {
                    $.order_edit.showValidateErrors(r.errors);
                }
            },
            always
        );
    },

    /**
     * Cuts values ââto 4 decimal places, and then rounds
     * @param data
     * @returns {*}
     */
    parseTotalResponse: function (data) {
        var keys = [
            'total',
            'discount',
            'shipping',
            'tax',
            'subtotal'
        ];
        keys.forEach(function (key) {
            if (typeof data[key] === 'number' || typeof data[key] === 'string') {
                var value = +data[key];
                data[key] = $.order_edit.roundFloat(parseFloat(value.toFixed(2)))
            }
        });

        return data;
    },

    /**
     * @param val
     * @returns {*}
     */
    roundFloat: function (val) {
        if (!val) {
            return 0;
        } else {
            return this.formatFloat(Math.round(val * 100) / 100)
        }
    },

    formatFloat: function (f) {
        if (this.float_delimeter === ',') {
            return ('' + f).replace('.', ',');
        }
        return '' + f;
    },

    /**
     * @param {String} str
     * @returns {number}
     */
    parseFloat: function (str) {
        if (str) {
            return parseFloat(('' + str).replace(',', '.'));
        } else {
            return 0;
        }
    },

    slideBack: function () {
        this.slide(false, this.options.mode == 'add');
    },

    slide: function (on, add, done) {
        if (arguments.length == 0) {
            this.slide(true, this.options.mode == 'add');
            return;
        }
        on = typeof on === 'undefined' ? true : on; // on/off
        add = typeof add === 'undefined' ? false : add;
        var duration = this.options.duration || 200;
        var view = this.options.view;
        var deferreds = [];

        if (!this.slide_on && on) { // make editable
            deferreds.push($('#s-sidebar').animate({
                'width': 0
            }, duration, function () {
                $(this).hide();
            }));
            $('.s-level2').hide();
            deferreds.push($('#maincontent').animate({
                'margin-top': 45
            }, duration));
            deferreds.push($('#s-content').animate({
                'margin-left': 0
            }, duration));
            deferreds.push($('#s-orders').animate({
                'width': 0
            }, duration, function () {
                $(this).hide();
            }));
            deferreds.push($('#s-order').animate({
                'margin-left': 0
            }, duration).find('>div:first').removeClass('double-padded, bordered-left').find('h1 .back.order-list').hide().end().find('h1 .back.read-mode')
                .show());
            this.slide_on = true;
            $('.s-order-readable').hide();
            $('.s-order-editable').show();

            $.when(deferreds).done(function () {
                if ($.order_list && $.order_list.lazy_load_win) {
                    $.order_list.lazy_load_win.lazyLoad('sleep');
                }
                if (typeof done === 'function') {
                    done.call(this);
                }
            });

            return true;
        } else if (this.slide_on && !on) { // make readable
            deferreds
                .push($('#s-order').animate({
                    'margin-left': view != 'table' && !add ? 300 : 200
                }, duration).find('>div:first').addClass('double-padded, bordered-left').find('h1 .back.order-list').show().end().find('h1 .back.read-mode').hide());
            deferreds.push($('#s-orders').animate({
                'width': 300
            }, duration).show());
            deferreds.push($('#s-content').animate({
                'margin-left': 200
            }, duration));
            deferreds.push($('#maincontent').animate({
                'margin-top': 84
            }, duration));
            $('.s-level2').show();
            deferreds.push($('#s-sidebar').animate({
                'width': 200
            }, duration).show());
            this.slide_on = false;
            $('.s-order-editable').hide();
            $('.s-order-readable').show();

            $.when(deferreds).done(function () {
                if ($.order_list.lazy_load_win) {
                    $.order_list.lazy_load_win.lazyLoad('wake');
                }
                if (typeof done === 'function') {
                    done.call(this);
                }
            });

            return true;
        }
        return false;
    },

    /**
     * Disable or allow click to "save" button and show or hide loading icon
     */
    switchSubmitButton: function (condition) {
        var form = this.form,
            loading_icon = $(form).find('.s-order-items-edit td.save i.loading'),
            submit_button = $(form).find('[type=submit]');

        if (condition === 'disable') {
            loading_icon.css('display', 'inline-block');
            submit_button.attr('disabled', true);
        } else {
            loading_icon.css('display', 'none');
            submit_button.attr('disabled', false);
        }

    },

    showValidateErrors: function (validate_errors) {
        var that = this,
            common_errors = [];

        $.shop.trace('showValidateErrors', validate_errors);
        $('#shipping-info').find('.error').empty();
        $('.error').removeClass('error');
        $('#s-order-edit-customer .errormsg').empty();

        if (that.customer_form) {
            that.customer_form.showValidateErrors(validate_errors ? validate_errors.customer : {});
        }

        $('.s-order-errors').empty();
        if (validate_errors && validate_errors.order) {
            if (!$.isEmptyObject(validate_errors.order.items)) {
                for (var index in validate_errors.order.items) {
                    var tr = $('.s-order-item[data-index=' + index + ']');
                    var errors = validate_errors.order.items[index];
                    for (var name in errors) {
                        var message = tr.find('.s-error-item-' + name);
                        if (message.length) {
                            message.text(errors[name]);
                        } else {
                            common_errors.push(errors[name]);
                        }
                    }
                    delete validate_errors.order.items[index];
                }
            }


            if (!$.isEmptyObject(validate_errors.order.product)) {
                var p_errors = validate_errors.order.product;
                for (var p_id in p_errors) {
                    if (p_errors.hasOwnProperty(p_id)) {
                        if ('quantity' in p_errors[p_id]) {
                            $('.s-order-item[data-product-id=' + p_id + ']').each(function () {
                                if ($(this).find('ul.s-orders-skus input:radio:checked').val() == '' + p_errors[p_id]['sku_id'] || !$(this).find('ul.s-orders-skus').length) {
                                    $(this).find('.s-orders-quantity').addClass('error');
                                    common_errors.push(p_errors[p_id]['quantity']);
                                }
                            });
                        }
                    }
                }
            }
            if (validate_errors.order.common) {
                common_errors.push(validate_errors.order.common);
            }

            if (validate_errors.order.discount) {
                $('#discount').addClass('error');
                common_errors.push(validate_errors.order.discount);
            }

            if (common_errors.length) {
                $('.s-order-errors').html(common_errors.join("<br>"));
            }

        }
    },

    /**
     * Get current selected storefont
     * @param {Boolean} verbose
     * @returns {String|Object} If verbose is TRUE then return {Object} info
     */
    getSelectedStorefront: function (verbose) {
        var that = this,
            $selector = that.$storefront_selector,
            val = $.trim($selector.val());
        if (verbose) {
            return {
                storefront: val,
                data: $selector.find(":selected").data()
            }
        } else {
            return val;
        }
    },

    /**
     * @returns {jQuery}
     */
    getStorefrontSelector: function () {
        return this.$storefront_selector;
    },

    getStorefront: function () {
        return this.getStorefrontSelector().val();
    },

    initStorefrontSelector: function () {
        var that = this,
            $selector = that.$storefront_selector;

        $selector.on('change', function () {
            if (that.customer_form && that.customer_form.isEnabled()) {
                that.customer_form.reloadForm();
            }
        });
    },

    filterStorefrontSelector: function (contact_type) {
        var that = this,
            $selector = that.$storefront_selector;

        $selector.find('option').each(function () {
            var $option = $(this),
                val = $option.val(),
                data = $option.data();

            // show previously hided
            $option.show();

            // ignore option of current order storefront and 'manual' storefront - do not hide these options
            if (data.orderStorefront || !val) {
                return;
            }

            // this options is available for current contact type - do not hide this option
            if (!contact_type || data[contact_type]) {
                return;
            }

            // all other options make hidden
            $option.hide();

            // if turn out that hidden option is selected - than reset selector to '' value
            if ($option.is(':selected')) {
                $selector.val('');
            }
        });
    },
    getPercentSymbol: function () {
        return '%';
    }
};
;
/**
 * @class {ShopBackendCustomerForm}
 */
var ShopBackendCustomerForm = ( function($) {

    /**
     * NOTICE: html section of customer form can be reloaded
     * SO DON NOT BIND EVENT HANDLERS RIGHT TO CONCRETE DOM ELEMENT,
     * USE delegation: $wrapper.on('<event>', '<selector>', function() {} );
     * @param {jQuery} $wrapper
     * @param options
     * @constructor
     */
    ShopBackendCustomerForm = function($wrapper, options) {

        /**
         * @class {ShopBackendCustomerForm}
         */
        var that = this;

        that.options = options || {};

        // DOM
        that.$wrapper = $wrapper;

        // VAR
        that.dom_ns = that.$wrapper.attr('id');
        that.namespace = options.namespace || null;
        that.locales = options["locales"];
        that.fields_config = options.fields_config || {};

        // bind with this DOM current instance of FORM
        that.$wrapper.data('ShopBackendCustomerForm', that);

        // Activate right aways in DOM in Document
        // When DOM in Memory only, not activate (to prevent set handlers), need for reloadForm
        if ($.contains(document, that.$wrapper.get(0))) {
            that.activate();
        }
    };

    /**
     * All HANDLERS inits MUST BE HERE
     */
    ShopBackendCustomerForm.prototype.activate = function() {
        var that = this;

        // We can reload form (see reloadForm method), so in init MUST OFF all inner handlers
        // EXCEPT of handlers for custom events (see bind method)
        that.$wrapper.off('.' + that.dom_ns);

        that.initConfirmedCheckboxes();

        that.initContactTypeSelector();

        that.initShippingAddress();

        that.initBillingAddress();

        that.initAdditionalAddressSubfields();

        that.fixStyles();
    };

    /**
     * Release all handlers
     */
    ShopBackendCustomerForm.prototype.deactivate = function() {
        var that = this;

        // release inner handlers
        that.$wrapper.off('.' + that.dom_ns);

        // release custom events handlers
        that.unbindAll();
    };

    ShopBackendCustomerForm.prototype.getOptions = function() {
        return this.options || {};
    };

    ShopBackendCustomerForm.prototype.setOptions = function(options) {
        this.options = options || {};
    };

    ShopBackendCustomerForm.prototype.getContact = function(clone) {
        var contact = this.options.contact || {};
        return clone ? $.extend({}, contact, true) : contact;
    };

    ShopBackendCustomerForm.prototype.initConfirmedCheckboxes = function() {
        var that = this,
            $wrapper = that.$wrapper,
            $email_field = $wrapper.find('.field-email:eq(0)'),
            $phone_field = $wrapper.find('.field-phone:eq(0)'),
            $email_confirmed_control = $wrapper.find('.s-customer-email-confirmed-control'),
            $phone_confirmed_control = $wrapper.find('.s-customer-phone-confirmed-control');

        $email_field.find('.value').children().first().after($email_confirmed_control);
        $phone_field.find('.value').children().first().after($phone_confirmed_control);
    };

    ShopBackendCustomerForm.prototype.initContactTypeSelector = function() {
        var that = this,
            ns = that.dom_ns,
            $wrapper = that.$wrapper;

        // If this is a selector then we deals with new contact (not existed)
        $wrapper.on('click.' + ns, '.s-order-form-contact-type-selector-wrapper :radio', function () {
            var $input = $(this),
                $loading = that.$wrapper.find('.s-order-form-contact-type-selector-wrapper .loading'),
                type = $.trim($input.val());
            $loading.show();
            that.reloadForm({ type: type }, {
                afterReload: function () {
                    $loading.hide();
                }
            });
        })
    };

    /**
     * This method must be called after initShippingAddress and initBillingAddress
     */
    ShopBackendCustomerForm.prototype.initAdditionalAddressSubfields = function() {
        var that = this,
            fields_config = that.fields_config,
            $wrapper = that.$wrapper;

        var getControlSelector = function () {
            return '.s-customer-more-address-subfields-control';
        };

        var getControl = function () {
            return $wrapper.find(getControlSelector());
        };

        var getAddressBlockSelector = function () {
            return '.s-address-block';
        };

        var getAddressBlocks = function () {
            return $wrapper.find(getAddressBlockSelector());
        };

        getAddressBlocks().each(function () {
            var $address_block = $(this),
                $address_field = $address_block.closest('.field-address'),
                address_ext = '';

            if ($address_field.hasClass('field-address-shipping')) {
                address_ext = 'shipping';
            } else if ($address_field.hasClass('field-address-billing')) {
                address_ext = 'billing';
            }

            if (!address_ext) {
                return;
            }

            var $subfields = $address_block.find('.field').hide();
            var $last_field = $();
            var shown_fields = 0;
            $.each(fields_config['address.' + address_ext]['fields'] || {}, function (field_id) {
                $last_field = $subfields.filter('.field-address-' + field_id).show();
                shown_fields++;
            });

            // after last shown field put control link to unfold (show) other (additional) fields
            if (shown_fields != $subfields.length) {
                $last_field.after(getControl().first().clone());
            }
        });

        $wrapper.on('click', getControlSelector(), function () {
            var $link = $(this);
            // Address fields are not always inside a block with class .s-address-block
            if ($link.siblings(getAddressBlockSelector()).length) {
                $link.siblings('.field, input').appendTo($link.siblings(getAddressBlockSelector())).show();
            } else {
                $link.closest(getAddressBlockSelector()).find('.field').show();
            }
            $link.remove();
        });
    };

    ShopBackendCustomerForm.prototype.initShippingAddress = function() {
        var that = this,
            $wrapper = that.$wrapper;

        var getShippingAddressBlocks = function () {
            return $wrapper.find('.field-address-shipping').find('.value').children();
        };

        var getControlSelector = function () {
            return '.s-customer-more-shipping-addresses-control';
        };

        var getControl = function () {
            return $wrapper.find(getControlSelector());
        };

        getShippingAddressBlocks().each( function(index) {
            var $block = $(this);

            var locale = ( index > 0 ? that.locales["extra_shipping_address"] : that.locales["main_shipping_address"] );
            var $header = $("<span />").addClass("s-block-header bold").text(locale);

            $block.addClass("s-address-block").prepend($header);
        });

        var extra_addresses_present = getShippingAddressBlocks().length > 1,
            errors_in_extra_addresses_present = getShippingAddressBlocks().not(':first').find('.errormsg,.error').length > 0;

        if (extra_addresses_present && !errors_in_extra_addresses_present) {
            // hide extra addresses
            getShippingAddressBlocks().not(':first').hide();
            // relocate control in right place
            getShippingAddressBlocks().first().after(getControl());
        }

        // Toggle is actual only when there are several shipping addresses

        $wrapper.on("click", getControlSelector() + " .js-toggle-button", function(event) {
            event.preventDefault();
            getShippingAddressBlocks().not(':first').show();
            getControl().hide();
        });

    };

    ShopBackendCustomerForm.prototype.initBillingAddress = function() {
        var that = this,
            $wrapper = that.$wrapper;

        var getBillingAddressBlocks = function () {
            return $wrapper.find('.field-address-billing').find('.value').children();
        };

        var getControlSelector = function () {
            return '.s-customer-more-billing-addresses-control';
        };

        var getControl = function () {
            return $wrapper.find(getControlSelector());
        };

        getBillingAddressBlocks().each( function(index) {
            var $block = $(this);

            var locale = ( index > 0 ? that.locales["extra_billing_address"] : that.locales["main_billing_address"] );
            var $header = $("<span />").addClass("s-block-header bold").text(locale);

            $block.addClass("s-address-block").prepend($header);
        });

        var extra_addresses_present = getBillingAddressBlocks().length > 1,
            errors_in_extra_addresses_present = getBillingAddressBlocks().not(':first').find('.errormsg,.error').length > 0;

        if (extra_addresses_present && !errors_in_extra_addresses_present) {
            // hide extra addresses
            getBillingAddressBlocks().not(':first').hide();
            // relocate control in right place
            getBillingAddressBlocks().first().after(getControl());
        }

        // Toggle is actual only when there are several shipping addresses

        $wrapper.on("click", getControlSelector() + " .js-toggle-button", function(event) {
            event.preventDefault();
            getBillingAddressBlocks().not(':first').show();
            getControl().hide();
        });
    };

    ShopBackendCustomerForm.prototype.fixStyles = function() {
        var that = this,
            namespace = that.namespace,
            $wrapper = that.$wrapper;
        // reset inline system styles
        
        $wrapper.find('.field-birthday input[name="' + namespace + '[birthday][year]"]').css({
            width: '',
            minWidth: ''
        })
    };

    ShopBackendCustomerForm.prototype.updateInnerHtml = function(html) {
        // new ShopBackendCustomerForm() will be called, but instance will not be activated
        var that = this,
            $wrapper = that.$wrapper,
            $div = $('<div>').hide().appendTo('body').html(html),
            $wrp = $div.find('.s-customer-form-wrapper'),
            inst = ShopBackendCustomerForm.getInstance($wrp);

        // set new options for current (that) instance
        that.setOptions(inst.getOptions());

        // new options we had - now just update content
        $wrapper.html($div.children(0).html());

        // dont forget clean after yourself
        $div.remove();
    };

    /**
     * Load new contact form by contact ID and replace current form
     *
     * @param {Object}  [options]      - Associative array of options
     * @param {Number}  [options.id]   - Contact ID
     * @param {String}  [options.type] - Contact type, if ID passed, contact type will be get from proper contact
     * @param {Boolean} [options.new]  - Default is False. If 'new' passed, form will be reload fully, without passing any form input data
     *
     * @param {Object}   [callbacks]
     * @param {Function} [callbacks.afterReload]
     */
    ShopBackendCustomerForm.prototype.reloadForm = function (options, callbacks) {
        var that = this,
            $wrapper = that.$wrapper;

        // typecast callbacks
        callbacks = callbacks || {};

        // prepare data for ajax request
        var data = $.extend({}, options || {});

        if (!data.type) {
            data.type = that.getContact().type;
        }

        // loading to show that we are in process
        var $loading = $wrapper.find('.loading').show();

        callbacks.beforeReload && callbacks.beforeReload(data);

        $wrapper.trigger('beforeReload', [ data ]);

        // If need load new form, we don't pass form input values
        if (!options['new']) {
            var field_data = $wrapper.find(':input:not(:disabled)').serializeArray();
            var address_types = ['shipping', 'billing'];
            $.each(field_data, function (index, field) {
                if (field.name.indexOf(that.namespace)) {
                    for (var address_type of address_types) {
                        var $region = $('[name="' + that.namespace + '[address.' + address_type + '][region]"]');
                        if ($region.length > 0 && $region.data('country') != "") {
                            data[that.namespace + '[address.' + address_type + '][data][country]'] = $region.data('country');
                        }
                    }
                }
                data[field.name] = field.value;
            });
        }
        $.post('?action=customerForm', data, function (html) {

            that.updateInnerHtml(html);

            // hide loading
            $loading.hide();

            var contact = that.getContact(true);

            callbacks.afterReload && callbacks.afterReload(contact);

            // pass in trigger clone of contact info, to prevent outer influence
            $wrapper.trigger('afterReload', [ contact ]);
        });
    };

    ShopBackendCustomerForm.prototype.bind = function(event, handler) {
        var that = this,
            ns = that.dom_ns,
            $wrapper = that.$wrapper;
        $wrapper.on(event + '.custom' + ns, handler);
    };

    ShopBackendCustomerForm.prototype.unbindAll = function() {
        var that = this,
            ns = that.dom_ns,
            $wrapper = that.$wrapper;
        $wrapper.off(event + '.custom' + ns);
    };

    /**
     * @param {jQuery} $wrapper
     * @returns ShopBackendCustomerForm|null
     */
    ShopBackendCustomerForm.getInstance = function ($wrapper) {
        if ($wrapper.data('ShopBackendCustomerForm') instanceof ShopBackendCustomerForm) {
            return $wrapper.data('ShopBackendCustomerForm');
        } else {
            return null;
        }
    };

    return ShopBackendCustomerForm;

})(jQuery);
;
/**
 * @class {ShopBackendOrderEditorCustomerForm}
 */
var ShopBackendOrderEditorCustomerForm = ( function($) {

    /**
     * @param {jQuery} $wrapper
     * @param editor
     * @param {Object} options
     * @constructor
     */
    ShopBackendOrderEditorCustomerForm = function($wrapper, editor, options) {

        /**
         * @class {ShopBackendOrderEditorCustomerForm}
         */
        var that = this;

        /**
         * @member {Object}
         */
        that.options = options || {};

        /**
         * @member {jQuery}
         */
        that.$wrapper = $wrapper && $wrapper.length > 0 ? $wrapper : $('#s-order-edit-customer');

        /**
         * @member {Object}
         */
        that.editor = editor;

        /**
         * @member {jQuery}
         */
        that.$customer_inputs = that.$wrapper.find(':input');

        /**
         * @member {Object}
         */
        that.initial_values = {};

        /**
         * @member {jQuery}
         */
        that.$customer_form_wrapper = that.$wrapper.find('.s-customer-form-wrapper');

        /**
         * @member {ShopBackendCustomerForm}
         */
        that.customer_form = ShopBackendCustomerForm.getInstance(that.$customer_form_wrapper);
        if (!that.customer_form) {
            console.error('There is not ShopBackendCustomerForm instance');
        }

        /**
         * @member {jQuery}
         */
        that.$autocomplete = $("#customer-autocomplete");

        /**
         * @member {jQuery}
         */
        that.$customer_id = $('#s-customer-id');

        /**
         * @member {jQuery}
         */
        that.$new_customer_link = $('#s-order-new-customer');

        that.contact = options.contact || {};

        that.init();

    };

    ShopBackendOrderEditorCustomerForm.prototype.init = function () {
        var that = this;

        that.initForm();

        that.rememberInitialValues();

        that.initAutocomplete();
    };

    ShopBackendOrderEditorCustomerForm.prototype.rememberInitialValues = function() {
        var that = this,
            $customer_inputs = that.$customer_inputs;
        $customer_inputs.each(function () {
            var $self = $(this),
                name = $self.attr('name'),
                val = $self.val();
            if ($self.is(':radio')) {
                if ($self.is(':checked')) {
                    that.initial_values[name] = val;
                }
            } else if ($self.is(':checkbox')) {
                that.initial_values[name] = $self.is(':checked');
            } else {
                that.initial_values[name] = val;
            }
        });
    };

    ShopBackendOrderEditorCustomerForm.prototype.resetInputValues = function() {
        var that = this,
            $customer_inputs = that.$customer_inputs;
        $customer_inputs.each(function () {
            var $self = $(this),
                name = $self.attr('name'),
                val = $self.val(),
                prev_val = that.initial_values[name] || '';
            if ($self.is(':radio')) {
                if (val === prev_val) {
                    $self.attr('checked', 'checked');
                }
            } else if ($self.is(':checkbox')) {
                if ($self.is(':checked')) {
                    $self.attr('checked', 'checked');
                } else {
                    $self.attr('checked', '');
                }
            } else {
                $self.val();
            }
        });
    };

    ShopBackendOrderEditorCustomerForm.prototype.disable = function(disabled) {
        var that = this,
            $customer_id = that.$customer_id,
            $wrapper = that.$wrapper;

        disabled = typeof disabled === 'undefined' ? true : disabled;

        $customer_id.attr('disabled', disabled);
        if (disabled) {
            $wrapper.addClass('s-opaque');
        } else {
            $wrapper.removeClass('s-opaque');
        }
    };

    /**
     * Check is form 'disabled'
     * @returns {Boolean}
     */
    ShopBackendOrderEditorCustomerForm.prototype.isDisabled = function() {
        return this.$wrapper.hasClass('s-opaque');
    };

    /**
     * Check is form 'enabled'
     * @returns {Boolean}
     */
    ShopBackendOrderEditorCustomerForm.prototype.isEnabled = function() {
        return !this.isDisabled();
    };

    ShopBackendOrderEditorCustomerForm.prototype.activate = function(activate) {
        var that = this,
            $new_customer_link = that.$new_customer_link,
            $autocomplete = that.$autocomplete;

        activate = typeof activate === 'undefined' ? true : activate;
        if (activate) {
            that.disable(false);
            $autocomplete.val('').hide(200);
            $new_customer_link.hide(200);
        } else {
            that.disable();
            $autocomplete.val('').show();
            $new_customer_link.show();
        }
    };

    ShopBackendOrderEditorCustomerForm.prototype.focusFirstEmptyInput = function() {
        var that = this,
            $customer_inputs = that.$customer_inputs,
            focused = false;

        $customer_inputs.filter('input[type=text], textarea').each(function () {
            var input = $(this);
            if (input.is(':not(:hidden)') && !this.value) {
                focused = true;
                input.focus();
                return false;
            }
        });

        if (!focused) {
            $customer_inputs.first().focus();
        }
    };

    ShopBackendOrderEditorCustomerForm.prototype.initAutocomplete = function() {
        var that = this,
            $autocomplete = that.$autocomplete;

        var looksLikePhone = function (str) {
            return parseInt(str, 10) || str.substr(0, 1) == '+' || str.indexOf('(') !== -1;
        };

        var looksLikeEmail = function (str) {
            return str.indexOf('@') !== -1;
        };

        var fillInputByTerm = function (term) {
            var selector = '[name=' + that.inputName(
                looksLikePhone(term) ? 'phone' : (
                    looksLikeEmail(term) ? 'email' : 'firstname'
                )) + ']';

            that.$customer_inputs.filter(selector).val(term);
        };

        var term = '';

        // autocomplete
        $autocomplete.autocomplete({
            source: function (request, response) {
                term = request.term;
                $.getJSON(that.options.autocomplete_url, request, function (r) {
                    (r = r || []).push({
                        label: $_('New customer'),
                        name: $_('New customer'),
                        value: 0
                    });
                    response(r);
                });
            },
            delay: 300,
            minLength: 3,
            select: function (event, ui) {
                var item = ui.item;

                if (item.value > 0) {
                    that.reloadForm({
                        id: item.value,
                        'new': true
                    });
                    return false;
                }

                // get currently selected storefront
                var storefront = that.editor.getSelectedStorefront();
                if (storefront) {
                    // concrete storefront chosen - reload form
                    // see initForm method around .bind('beforeReload')
                    that.reloadForm({}, {
                        afterReload: function () {
                            fillInputByTerm(term);
                        }
                    });
                    return false;
                }

                fillInputByTerm(term);
                
                that.$customer_id.val(0);
                that.activate();

                // autocomplete make focus for its input. That brakes out plan!
                // setTimout-hack for fix it
                setTimeout(function () {
                    that.focusFirstEmptyInput();
                }, 200);

                return false;
            },
            focus: function (event, ui) {
                this.value = ui.item.name;
                return false;
            }
        });

    };

    /**
     * Reload customer form
     * @param {Object} [data]
     * @param {Object} [callbacks]
     */
    ShopBackendOrderEditorCustomerForm.prototype.reloadForm = function(data, callbacks) {
        var that = this,
            customer_form = that.customer_form;

        callbacks = callbacks || {};

        that.disable(true);

        data = data || {};

        // Data object will be always mixed with current the context, see beforeReload
        customer_form.reloadForm(data, {
            afterReload: function (contact) {

                // after reload form inner DOM is different, need update $customer_inputs
                that.$customer_inputs = that.$wrapper.find(':input');

                // update contact info of that instance (+ some extra stuff)
                that.contact = contact || {};
                that.$customer_id.val(contact.id);

                // form must be activated and ready to inputs from user (in here will be un-disabled, so do not call disable(false))
                that.activate();

                // autocomplete make focus for its input. That brakes out plan!
                // setTimout-hack for fix it
                setTimeout(function () {
                    that.focusFirstEmptyInput();
                }, 200);

                // address can be changed - so shipping price must be recalculated and so total price
                that.editor.updateTotal();

                callbacks.afterReload && callbacks.afterReload(contact);
            }
        });
    };

    /**
     */
    ShopBackendOrderEditorCustomerForm.prototype.initForm = function () {
        var that = this,
            customer_form = that.customer_form,
            editor = that.editor,
            $wrapper = that.$wrapper;

        // Mark names fields (firstname, middlename, lastname) as having one name (class) of error
        var names = ['firstname', 'middlename', 'lastname'];
        for (var i = 0, n = names.length; i < n; i += 1) {
            var name = names[i];
            that.$customer_inputs.filter('[name=' + that.inputName(name) + ']').addClass('s-error-customer-name');
        }
        $wrapper.find('.s-error-customer-name:last').after('<em class="errormsg s-error-customer-name"></em>');

        // Link to choose a new customer mode (clean form, etc)
        that.$new_customer_link.on('click', function () {

            // not supported case - actual only for new customer more (new clean form)
            if (that.$customer_id.val() > 0) {
                return false;
            }

            var activate = function() {
                that.activate();
                that.$customer_inputs.first().focus();
            };

            editor.filterStorefrontSelector(that.getContact().type);

            // get currently selected storefront
            var storefront = editor.getSelectedStorefront();

            if (storefront) {
                // concrete storefront chosen - reload form
                // see initForm method around .bind('beforeReload')
                that.reloadForm();
            } else {
                // not concrete storefront chosen - just activate form for user
                activate();
            }

            return false;
        });


        if (that.getContact().id > 0) {
            // when there is existing contact, mark whole form as active (so no disabled inputs will be in contact form and no autocomplete)
            that.activate();
        } else {
            // when there is not contact (or some sort of "empty" contact), mark whole form as disabled, so user could only use autocomplete
            that.activate(false);
        }

        $wrapper.off('focus', ':input').on('focus', ':input', function () {
            that.disable(false);
        });

        // Before customer form will be reloaded mix-in context params
        customer_form.bind('beforeReload', function (event, data) {
            if (typeof data.id === 'undefined') {
                data.id = that.getContact().id;
            }
            data.storefront = editor.getSelectedStorefront();
        });

        // After customer form reloaded make sure that storefront selector filtered by contact type
        customer_form.bind('afterReload', function (event, contact) {
            editor.filterStorefrontSelector(contact.type);
        });

        // filter storefront
        editor.filterStorefrontSelector(that.getContact().type);


        // Update total if customer address edit
        $wrapper.on('change', ':input[name*="[address\.shipping]"]', function (e) {
            if (e.originalEvent) {
                $.shop.trace('Update total if customer address edit', [this, e]);
                editor.updateTotal();
            }
        });

        // When submit order form, disable contact form
        editor.form.submit(function () {
            that.disable(false);
        });

    };

    ShopBackendOrderEditorCustomerForm.prototype.showValidateErrors = function(customer_errors) {
        customer_errors = $.extend({}, customer_errors || {});

        if ($.isEmptyObject(customer_errors)) {
            return;
        }

        var that = this,
            customer_form = that.customer_form,
            new_html = $.trim(customer_errors.html);

        if (new_html.length > 0) {
            customer_form.updateInnerHtml(new_html);
        }
    };

    ShopBackendOrderEditorCustomerForm.prototype.inputName = function (name) {
        return '"customer[' + name + ']"';
    };


    ShopBackendOrderEditorCustomerForm.prototype.getContact = function() {
        var that = this;
        that.contact = that.contact || {};
        return that.contact;
    };

    return ShopBackendOrderEditorCustomerForm;

})(jQuery);
;
